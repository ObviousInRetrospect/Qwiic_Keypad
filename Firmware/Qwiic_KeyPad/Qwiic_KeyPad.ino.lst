
C:\Users\PETELE~1.SPA\AppData\Local\Temp\arduino_build_45378/Qwiic_KeyPad.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	2c c0       	rjmp	.+88     	; 0x5a <__ctors_end>
       2:	50 c0       	rjmp	.+160    	; 0xa4 <__bad_interrupt>
       4:	4f c0       	rjmp	.+158    	; 0xa4 <__bad_interrupt>
       6:	4e c0       	rjmp	.+156    	; 0xa4 <__bad_interrupt>
       8:	4d c0       	rjmp	.+154    	; 0xa4 <__bad_interrupt>
       a:	4c c0       	rjmp	.+152    	; 0xa4 <__bad_interrupt>
       c:	4b c0       	rjmp	.+150    	; 0xa4 <__bad_interrupt>
       e:	4a c0       	rjmp	.+148    	; 0xa4 <__bad_interrupt>
      10:	49 c0       	rjmp	.+146    	; 0xa4 <__bad_interrupt>
      12:	48 c0       	rjmp	.+144    	; 0xa4 <__bad_interrupt>
      14:	47 c0       	rjmp	.+142    	; 0xa4 <__bad_interrupt>
      16:	12 c7       	rjmp	.+3620   	; 0xe3c <__vector_11>
      18:	45 c0       	rjmp	.+138    	; 0xa4 <__bad_interrupt>
      1a:	44 c0       	rjmp	.+136    	; 0xa4 <__bad_interrupt>
      1c:	43 c0       	rjmp	.+134    	; 0xa4 <__bad_interrupt>
      1e:	3b c2       	rjmp	.+1142   	; 0x496 <__vector_15>
      20:	82 c2       	rjmp	.+1284   	; 0x526 <__vector_16>

00000022 <__trampolines_end>:
__trampolines_start():
      22:	00 00       	nop
      24:	00 00       	nop
      26:	00 04       	cpc	r0, r0
      28:	03 02       	muls	r16, r19
      2a:	01 00       	.word	0x0001	; ????
	...

0000002e <digital_pin_to_bit_mask_PGM>:
      2e:	01 02 04 08 10 20 40 80 04 02 01 08                 ..... @.....

0000003a <digital_pin_to_port_PGM>:
      3a:	01 01 01 01 01 01 01 01 02 02 02 02                 ............

00000046 <port_to_input_PGM>:
      46:	00 00 39 00 36 00                                   ..9.6.

0000004c <port_to_output_PGM>:
      4c:	00 00 3b 00 38 00                                   ..;.8.

00000052 <port_to_mode_PGM>:
      52:	00 00 3a 00 37 00                                   ..:.7.

00000058 <__ctors_start>:
__ctors_start():
      58:	dd 01       	movw	r26, r26

0000005a <__ctors_end>:
__dtors_end():
      5a:	11 24       	eor	r1, r1
      5c:	1f be       	out	0x3f, r1	; 63
      5e:	cf e5       	ldi	r28, 0x5F	; 95
      60:	d2 e0       	ldi	r29, 0x02	; 2
      62:	de bf       	out	0x3e, r29	; 62
      64:	cd bf       	out	0x3d, r28	; 61

00000066 <__do_copy_data>:
__do_copy_data():
      66:	10 e0       	ldi	r17, 0x00	; 0
      68:	a0 e6       	ldi	r26, 0x60	; 96
      6a:	b0 e0       	ldi	r27, 0x00	; 0
      6c:	e8 ef       	ldi	r30, 0xF8	; 248
      6e:	f0 e1       	ldi	r31, 0x10	; 16
      70:	02 c0       	rjmp	.+4      	; 0x76 <__do_copy_data+0x10>
      72:	05 90       	lpm	r0, Z+
      74:	0d 92       	st	X+, r0
      76:	a4 39       	cpi	r26, 0x94	; 148
      78:	b1 07       	cpc	r27, r17
      7a:	d9 f7       	brne	.-10     	; 0x72 <__do_copy_data+0xc>

0000007c <__do_clear_bss>:
__do_clear_bss():
      7c:	21 e0       	ldi	r18, 0x01	; 1
      7e:	a4 e9       	ldi	r26, 0x94	; 148
      80:	b0 e0       	ldi	r27, 0x00	; 0
      82:	01 c0       	rjmp	.+2      	; 0x86 <.do_clear_bss_start>

00000084 <.do_clear_bss_loop>:
      84:	1d 92       	st	X+, r1

00000086 <.do_clear_bss_start>:
      86:	a8 38       	cpi	r26, 0x88	; 136
      88:	b2 07       	cpc	r27, r18
      8a:	e1 f7       	brne	.-8      	; 0x84 <.do_clear_bss_loop>

0000008c <__do_global_ctors>:
__do_global_ctors():
      8c:	10 e0       	ldi	r17, 0x00	; 0
      8e:	cd e2       	ldi	r28, 0x2D	; 45
      90:	d0 e0       	ldi	r29, 0x00	; 0
      92:	03 c0       	rjmp	.+6      	; 0x9a <__do_global_ctors+0xe>
      94:	21 97       	sbiw	r28, 0x01	; 1
      96:	fe 01       	movw	r30, r28
      98:	11 d8       	rcall	.-4062   	; 0xfffff0bc <__eeprom_end+0xff7ef0bc>
      9a:	cc 32       	cpi	r28, 0x2C	; 44
      9c:	d1 07       	cpc	r29, r17
      9e:	d1 f7       	brne	.-12     	; 0x94 <__do_global_ctors+0x8>
      a0:	b4 d6       	rcall	.+3432   	; 0xe0a <main>
      a2:	28 c8       	rjmp	.-4016   	; 0xfffff0f4 <__eeprom_end+0xff7ef0f4>

000000a4 <__bad_interrupt>:
__vector_1():
      a4:	ad cf       	rjmp	.-166    	; 0x0 <__vectors>

000000a6 <loop>:
loop():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:172
#endif

}

void loop(void)
{
      a6:	0f 93       	push	r16
      a8:	1f 93       	push	r17
      aa:	cf 93       	push	r28
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:174
  //Check for new key presses
  char key = keypad.getKey();
      ac:	85 e9       	ldi	r24, 0x95	; 149
      ae:	90 e0       	ldi	r25, 0x00	; 0
      b0:	8c d6       	rcall	.+3352   	; 0xdca <Keypad::getKey()>
      b2:	e8 2f       	mov	r30, r24
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:175
  if (key) {
      b4:	88 23       	and	r24, r24
      b6:	09 f4       	brne	.+2      	; 0xba <loop+0x14>
      b8:	48 c0       	rjmp	.+144    	; 0x14a <loop+0xa4>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:178
    //Check for buffer overrun
    // if oldest press is trailing just one behind, then we also will need to increment
    if (oldestPress == (newestPress + 1)) oldestPress++;
      ba:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <oldestPress>
      be:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <newestPress>
      c2:	50 e0       	ldi	r21, 0x00	; 0
      c4:	30 e0       	ldi	r19, 0x00	; 0
      c6:	2f 5f       	subi	r18, 0xFF	; 255
      c8:	3f 4f       	sbci	r19, 0xFF	; 255
      ca:	42 17       	cp	r20, r18
      cc:	53 07       	cpc	r21, r19
      ce:	29 f4       	brne	.+10     	; 0xda <loop+0x34>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:178 (discriminator 1)
      d0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <oldestPress>
      d4:	9f 5f       	subi	r25, 0xFF	; 255
      d6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <oldestPress>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:179
    if ( (newestPress == (BUTTON_STACK_SIZE - 1)) && (oldestPress == 0) ) oldestPress++;
      da:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <newestPress>
      de:	8e 30       	cpi	r24, 0x0E	; 14
      e0:	29 f4       	brne	.+10     	; 0xec <loop+0x46>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:179 (discriminator 1)
      e2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <oldestPress>
      e6:	88 23       	and	r24, r24
      e8:	09 f4       	brne	.+2      	; 0xec <loop+0x46>
      ea:	45 c0       	rjmp	.+138    	; 0x176 <loop+0xd0>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:180
    if (oldestPress == BUTTON_STACK_SIZE) oldestPress = 0; //still need to wrap if it happens
      ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <oldestPress>
      f0:	8f 30       	cpi	r24, 0x0F	; 15
      f2:	11 f4       	brne	.+4      	; 0xf8 <loop+0x52>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:180 (discriminator 1)
      f4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <oldestPress>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:182

    newestPress++;
      f8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <newestPress>
      fc:	9f 5f       	subi	r25, 0xFF	; 255
      fe:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <newestPress>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:183
    if (newestPress == BUTTON_STACK_SIZE) newestPress = 0; //Wrap variable
     102:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <newestPress>
     106:	8f 30       	cpi	r24, 0x0F	; 15
     108:	11 f4       	brne	.+4      	; 0x10e <loop+0x68>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:183 (discriminator 1)
     10a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <newestPress>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:185

    buttonEvents[newestPress].button = key;
     10e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <newestPress>
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	65 e0       	ldi	r22, 0x05	; 5
     116:	70 e0       	ldi	r23, 0x00	; 0
     118:	c0 d7       	rcall	.+3968   	; 0x109a <__mulhi3>
     11a:	8a 5f       	subi	r24, 0xFA	; 250
     11c:	9e 4f       	sbci	r25, 0xFE	; 254
     11e:	dc 01       	movw	r26, r24
     120:	ec 93       	st	X, r30
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:186
    buttonEvents[newestPress].buttonTime = millis();
     122:	c0 91 05 01 	lds	r28, 0x0105	; 0x800105 <newestPress>
     126:	d4 d6       	rcall	.+3496   	; 0xed0 <millis>
     128:	8b 01       	movw	r16, r22
     12a:	9c 01       	movw	r18, r24
     12c:	8c 2f       	mov	r24, r28
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	65 e0       	ldi	r22, 0x05	; 5
     132:	70 e0       	ldi	r23, 0x00	; 0
     134:	b2 d7       	rcall	.+3940   	; 0x109a <__mulhi3>
     136:	8a 5f       	subi	r24, 0xFA	; 250
     138:	9e 4f       	sbci	r25, 0xFE	; 254
     13a:	fc 01       	movw	r30, r24
     13c:	01 83       	std	Z+1, r16	; 0x01
     13e:	12 83       	std	Z+2, r17	; 0x02
     140:	23 83       	std	Z+3, r18	; 0x03
     142:	34 83       	std	Z+4, r19	; 0x04
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:188

    digitalWrite(interruptPin, HIGH); //Set Int HIGH, to cause a FALLING edge later
     144:	61 e0       	ldi	r22, 0x01	; 1
     146:	87 e0       	ldi	r24, 0x07	; 7
     148:	44 d7       	rcall	.+3720   	; 0xfd2 <digitalWrite>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:200
    print_buttonEvents();
#endif
  }

  //Set interrupt pin as needed
  if (newestPress != oldestPress)
     14a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <newestPress>
     14e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <oldestPress>
     152:	98 17       	cp	r25, r24
     154:	11 f0       	breq	.+4      	; 0x15a <loop+0xb4>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:201
    digitalWrite(interruptPin, LOW); //We have events on the stack!
     156:	60 e0       	ldi	r22, 0x00	; 0
     158:	01 c0       	rjmp	.+2      	; 0x15c <loop+0xb6>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:203
  else
    digitalWrite(interruptPin, HIGH); //No button events to report
     15a:	61 e0       	ldi	r22, 0x01	; 1
     15c:	87 e0       	ldi	r24, 0x07	; 7
     15e:	39 d7       	rcall	.+3698   	; 0xfd2 <digitalWrite>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:205

  sleep_mode(); //Stop everything and go to sleep. Wake up if I2C event occurs.
     160:	85 b7       	in	r24, 0x35	; 53
     162:	80 62       	ori	r24, 0x20	; 32
     164:	85 bf       	out	0x35, r24	; 53
     166:	88 95       	sleep
     168:	85 b7       	in	r24, 0x35	; 53
     16a:	8f 7d       	andi	r24, 0xDF	; 223
     16c:	85 bf       	out	0x35, r24	; 53
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:206
}
     16e:	cf 91       	pop	r28
     170:	1f 91       	pop	r17
     172:	0f 91       	pop	r16
     174:	08 95       	ret
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:179
  char key = keypad.getKey();
  if (key) {
    //Check for buffer overrun
    // if oldest press is trailing just one behind, then we also will need to increment
    if (oldestPress == (newestPress + 1)) oldestPress++;
    if ( (newestPress == (BUTTON_STACK_SIZE - 1)) && (oldestPress == 0) ) oldestPress++;
     176:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <oldestPress>
     17a:	9f 5f       	subi	r25, 0xFF	; 255
     17c:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <oldestPress>
     180:	b5 cf       	rjmp	.-150    	; 0xec <loop+0x46>

00000182 <loadFifoRegister()>:
_Z16loadFifoRegisterv():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:257
  Wire.write((registerPointer + registerNumber), sizeof(memoryMap) - registerNumber);
}

//Take the FIFO button press off the stack and load it into the fifo register (ready for reading)
void loadFifoRegister()
{
     182:	0f 93       	push	r16
     184:	1f 93       	push	r17
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:258
  if (oldestPress != newestPress)
     186:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <oldestPress>
     18a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <newestPress>
     18e:	98 17       	cp	r25, r24
     190:	b1 f1       	breq	.+108    	; 0x1fe <loadFifoRegister()+0x7c>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:260
  {
    oldestPress++;
     192:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <oldestPress>
     196:	8f 5f       	subi	r24, 0xFF	; 255
     198:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <oldestPress>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:261
    if (oldestPress == BUTTON_STACK_SIZE) oldestPress = 0;
     19c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <oldestPress>
     1a0:	8f 30       	cpi	r24, 0x0F	; 15
     1a2:	11 f4       	brne	.+4      	; 0x1a8 <loadFifoRegister()+0x26>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:261 (discriminator 1)
     1a4:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <oldestPress>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:263

    registerMap.fifo_button = buttonEvents[oldestPress].button;
     1a8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <oldestPress>
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	65 e0       	ldi	r22, 0x05	; 5
     1b0:	70 e0       	ldi	r23, 0x00	; 0
     1b2:	73 d7       	rcall	.+3814   	; 0x109a <__mulhi3>
     1b4:	8a 5f       	subi	r24, 0xFA	; 250
     1b6:	9e 4f       	sbci	r25, 0xFE	; 254
     1b8:	fc 01       	movw	r30, r24
     1ba:	80 81       	ld	r24, Z
     1bc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <registerMap+0x3>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:265

    unsigned long timeSincePressed = millis() - buttonEvents[oldestPress].buttonTime;
     1c0:	87 d6       	rcall	.+3342   	; 0xed0 <millis>
     1c2:	8b 01       	movw	r16, r22
     1c4:	9c 01       	movw	r18, r24
     1c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <oldestPress>
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	65 e0       	ldi	r22, 0x05	; 5
     1ce:	70 e0       	ldi	r23, 0x00	; 0
     1d0:	64 d7       	rcall	.+3784   	; 0x109a <__mulhi3>
     1d2:	8a 5f       	subi	r24, 0xFA	; 250
     1d4:	9e 4f       	sbci	r25, 0xFE	; 254
     1d6:	fc 01       	movw	r30, r24
     1d8:	81 81       	ldd	r24, Z+1	; 0x01
     1da:	92 81       	ldd	r25, Z+2	; 0x02
     1dc:	a3 81       	ldd	r26, Z+3	; 0x03
     1de:	b4 81       	ldd	r27, Z+4	; 0x04
     1e0:	b9 01       	movw	r22, r18
     1e2:	a8 01       	movw	r20, r16
     1e4:	48 1b       	sub	r20, r24
     1e6:	59 0b       	sbc	r21, r25
     1e8:	6a 0b       	sbc	r22, r26
     1ea:	7b 0b       	sbc	r23, r27
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:267

    registerMap.fifo_timeSincePressed_MSB = (timeSincePressed >> 8);
     1ec:	05 2f       	mov	r16, r21
     1ee:	16 2f       	mov	r17, r22
     1f0:	27 2f       	mov	r18, r23
     1f2:	33 27       	eor	r19, r19
     1f4:	00 93 70 00 	sts	0x0070, r16	; 0x800070 <registerMap+0x4>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:268
    registerMap.fifo_timeSincePressed_LSB = timeSincePressed;
     1f8:	40 93 71 00 	sts	0x0071, r20	; 0x800071 <registerMap+0x5>
     1fc:	06 c0       	rjmp	.+12     	; 0x20a <loadFifoRegister()+0x88>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:273
  }
  else
  {
    //No new button presses. load blank records
    registerMap.fifo_button = 0;
     1fe:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <registerMap+0x3>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:274
    registerMap.fifo_timeSincePressed_MSB = 0;
     202:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <registerMap+0x4>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:275
    registerMap.fifo_timeSincePressed_LSB = 0;
     206:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <registerMap+0x5>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:277
  }
}
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	08 95       	ret

00000210 <requestEvent()>:
_Z12requestEventv():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:238
//When KeyPad gets a request for data from the user, this function is called as an interrupt
//The interrupt will respond with different types of data depending on what response state we are in
//The user sets the response type based on bytes sent to KeyPad
void requestEvent()
{
  if (registerMap.updateFIFO & (1 << 0))
     210:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <registerMap+0x6>
     214:	80 ff       	sbrs	r24, 0
     216:	06 c0       	rjmp	.+12     	; 0x224 <requestEvent()+0x14>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:241
  {
    // clear command bit
    registerMap.updateFIFO &= ~(1 << 0);
     218:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <registerMap+0x6>
     21c:	8e 7f       	andi	r24, 0xFE	; 254
     21e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <registerMap+0x6>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:244

    // update fifo, that is... copy oldest button (and buttonTime) into fifo register (ready for reading)
    loadFifoRegister();
     222:	af df       	rcall	.-162    	; 0x182 <loadFifoRegister()>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:252
#if defined(__AVR_ATmega328P__)
  print_registerMap();
  print_buttonEvents();
#endif

  Wire.write((registerPointer + registerNumber), sizeof(memoryMap) - registerNumber);
     224:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
     228:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__data_end>
     22c:	48 e0       	ldi	r20, 0x08	; 8
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	49 1b       	sub	r20, r25
     232:	51 09       	sbc	r21, r1
     234:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <registerPointer>
     238:	70 91 63 00 	lds	r23, 0x0063	; 0x800063 <registerPointer+0x1>
     23c:	68 0f       	add	r22, r24
     23e:	71 1d       	adc	r23, r1
     240:	87 e5       	ldi	r24, 0x57	; 87
     242:	91 e0       	ldi	r25, 0x01	; 1
     244:	52 c2       	rjmp	.+1188   	; 0x6ea <TwoWire::write(unsigned char const*, unsigned int)>

00000246 <readSystemSettings()>:
_ZNK5EERefdeEv():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\EEPROM/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	3e d7       	rcall	.+3708   	; 0x10c8 <eeprom_read_byte>
_Z18readSystemSettingsv():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:284
//Reads the current system settings from EEPROM
//If anything looks weird, reset setting to default value
void readSystemSettings(void)
{
  //Read what I2C address we should use
  registerMap.i2cAddress = EEPROM.read(LOCATION_I2C_ADDRESS);
     24c:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <registerMap+0x7>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:285
  if (registerMap.i2cAddress == 255)
     250:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <registerMap+0x7>
     254:	8f 3f       	cpi	r24, 0xFF	; 255
     256:	41 f4       	brne	.+16     	; 0x268 <__stack+0x9>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:287
  {
    registerMap.i2cAddress = I2C_ADDRESS_DEFAULT; //By default, we listen for I2C_ADDRESS_DEFAULT
     258:	8b e4       	ldi	r24, 0x4B	; 75
     25a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <registerMap+0x7>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:288
    EEPROM.write(LOCATION_I2C_ADDRESS, registerMap.i2cAddress);
     25e:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <registerMap+0x7>
_ZN5EERefaSEh():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\EEPROM/EEPROM.h:47
    operator uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     262:	81 e0       	ldi	r24, 0x01	; 1
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	38 c7       	rjmp	.+3696   	; 0x10d8 <eeprom_write_byte>
     268:	08 95       	ret

0000026a <startI2C()>:
_Z8startI2Cv():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:295
}

//Begin listening on I2C bus as I2C slave using the global variable registerMap.i2cAddress
void startI2C()
{
  Wire.end(); //Before we can change addresses we need to stop
     26a:	87 e5       	ldi	r24, 0x57	; 87
     26c:	91 e0       	ldi	r25, 0x01	; 1
     26e:	15 d2       	rcall	.+1066   	; 0x69a <TwoWire::end()>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:297

  if (digitalRead(addr) == HIGH) //Default is HIGH, the jumper is open
     270:	89 e0       	ldi	r24, 0x09	; 9
     272:	e9 d6       	rcall	.+3538   	; 0x1046 <digitalRead>
     274:	01 97       	sbiw	r24, 0x01	; 1
     276:	31 f4       	brne	.+12     	; 0x284 <startI2C()+0x1a>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:298
    Wire.begin(registerMap.i2cAddress); //Start I2C and answer calls using address from EEPROM
     278:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <registerMap+0x7>
     27c:	87 e5       	ldi	r24, 0x57	; 87
     27e:	91 e0       	ldi	r25, 0x01	; 1
     280:	08 d2       	rcall	.+1040   	; 0x692 <TwoWire::begin(unsigned char)>
     282:	05 c0       	rjmp	.+10     	; 0x28e <startI2C()+0x24>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:300
  else
    Wire.begin(I2C_ADDRESS_JUMPER); //Force address to I2C_ADDRESS_JUMPER if user has closed the solder jumper
     284:	6a e4       	ldi	r22, 0x4A	; 74
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	87 e5       	ldi	r24, 0x57	; 87
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	04 d2       	rcall	.+1032   	; 0x696 <TwoWire::begin(int)>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:303

  //The connections to the interrupts are severed when a Wire.begin occurs. So re-declare them.
  Wire.onReceive(receiveEvent);
     28e:	6e e7       	ldi	r22, 0x7E	; 126
     290:	71 e0       	ldi	r23, 0x01	; 1
     292:	87 e5       	ldi	r24, 0x57	; 87
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	73 d2       	rcall	.+1254   	; 0x77e <TwoWire::onReceive(void (*)(int))>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:304
  Wire.onRequest(requestEvent);
     298:	68 e0       	ldi	r22, 0x08	; 8
     29a:	71 e0       	ldi	r23, 0x01	; 1
     29c:	87 e5       	ldi	r24, 0x57	; 87
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	73 c2       	rjmp	.+1254   	; 0x788 <TwoWire::onRequest(void (*)())>

000002a2 <setup>:
setup():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:138

//-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

void setup(void)
{
  pinMode(addr, INPUT_PULLUP);
     2a2:	62 e0       	ldi	r22, 0x02	; 2
     2a4:	89 e0       	ldi	r24, 0x09	; 9
     2a6:	57 d6       	rcall	.+3246   	; 0xf56 <pinMode>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:139
  pinMode(interruptPin, OUTPUT); //Goes low when a button event is on the stack
     2a8:	61 e0       	ldi	r22, 0x01	; 1
     2aa:	87 e0       	ldi	r24, 0x07	; 7
     2ac:	54 d6       	rcall	.+3240   	; 0xf56 <pinMode>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:142

  //Disable ADC
  ADCSRA = 0;
     2ae:	16 b8       	out	0x06, r1	; 6
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:145

  //Disble Brown-Out Detect
  MCUCR = bit (BODS) | bit (BODSE);
     2b0:	84 e8       	ldi	r24, 0x84	; 132
     2b2:	85 bf       	out	0x35, r24	; 53
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:146
  MCUCR = bit (BODS);
     2b4:	80 e8       	ldi	r24, 0x80	; 128
     2b6:	85 bf       	out	0x35, r24	; 53
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:150

  //Power down various bits of hardware to lower power usage
  //set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  set_sleep_mode(SLEEP_MODE_IDLE);
     2b8:	85 b7       	in	r24, 0x35	; 53
     2ba:	87 7e       	andi	r24, 0xE7	; 231
     2bc:	85 bf       	out	0x35, r24	; 53
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:151
  sleep_enable();
     2be:	85 b7       	in	r24, 0x35	; 53
     2c0:	80 62       	ori	r24, 0x20	; 32
     2c2:	85 bf       	out	0x35, r24	; 53
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:153

  readSystemSettings(); //Load all system settings from EEPROM
     2c4:	c0 df       	rcall	.-128    	; 0x246 <readSystemSettings()>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:155

  startI2C(); //Determine the I2C address we should be using and begin listening on I2C bus
     2c6:	d1 cf       	rjmp	.-94     	; 0x26a <startI2C()>

000002c8 <recordSystemSettings()>:
_Z20recordSystemSettingsv():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:339
{
  //I2C address is byte
  byte i2cAddr;

  //Error check the current I2C address
  if (registerMap.i2cAddress < 0x08 || registerMap.i2cAddress > 0x77)
     2c8:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <registerMap+0x7>
     2cc:	88 30       	cpi	r24, 0x08	; 8
     2ce:	88 f0       	brcs	.+34     	; 0x2f2 <recordSystemSettings()+0x2a>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:339 (discriminator 2)
     2d0:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <registerMap+0x7>
     2d4:	88 37       	cpi	r24, 0x78	; 120
     2d6:	68 f4       	brcc	.+26     	; 0x2f2 <recordSystemSettings()+0x2a>
_ZNK5EERefdeEv():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\EEPROM/EEPROM.h:42

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	f5 d6       	rcall	.+3562   	; 0x10c8 <eeprom_read_byte>
_Z20recordSystemSettingsv():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:348
    registerMap.i2cAddress = I2C_ADDRESS_DEFAULT;
  }

  //Read the value currently in EEPROM. If it's different from the memory map then record the memory map value to EEPROM.
  EEPROM.get(LOCATION_I2C_ADDRESS, i2cAddr);
  if (i2cAddr != registerMap.i2cAddress)
     2de:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <registerMap+0x7>
     2e2:	89 17       	cp	r24, r25
     2e4:	51 f0       	breq	.+20     	; 0x2fa <recordSystemSettings()+0x32>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:350
  {
    EEPROM.write(LOCATION_I2C_ADDRESS, registerMap.i2cAddress);
     2e6:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <registerMap+0x7>
_ZN5EERefaSEh():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\EEPROM/EEPROM.h:47
    operator uint8_t() const       { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	f4 d6       	rcall	.+3560   	; 0x10d8 <eeprom_write_byte>
_Z20recordSystemSettingsv():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:351
    startI2C(); //Determine the I2C address we should be using and begin listening on I2C bus
     2f0:	bc cf       	rjmp	.-136    	; 0x26a <startI2C()>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:343
  //Error check the current I2C address
  if (registerMap.i2cAddress < 0x08 || registerMap.i2cAddress > 0x77)
  {
    //User has set the address out of range
    //Go back to defaults
    registerMap.i2cAddress = I2C_ADDRESS_DEFAULT;
     2f2:	8b e4       	ldi	r24, 0x4B	; 75
     2f4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <registerMap+0x7>
     2f8:	ef cf       	rjmp	.-34     	; 0x2d8 <recordSystemSettings()+0x10>
     2fa:	08 95       	ret

000002fc <receiveEvent(int)>:
_Z12receiveEventi():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:211
}

//When Qwiic Keypad receives data bytes from Master, this function is called as an interrupt
//(Serves rewritable I2C address and updateFifo command)
void receiveEvent(int numberOfBytesReceived)
{
     2fc:	ff 92       	push	r15
     2fe:	0f 93       	push	r16
     300:	1f 93       	push	r17
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	8c 01       	movw	r16, r24
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:212
  registerNumber = Wire.read(); //Get the memory map offset from the user
     308:	87 e5       	ldi	r24, 0x57	; 87
     30a:	91 e0       	ldi	r25, 0x01	; 1
     30c:	1d d2       	rcall	.+1082   	; 0x748 <TwoWire::read()>
     30e:	80 93 94 00 	sts	0x0094, r24	; 0x800094 <__data_end>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:216

  //Begin recording the following incoming bytes to the temp memory map
  //starting at the registerNumber (the first byte received)
  for (byte x = 0 ; x < numberOfBytesReceived - 1 ; x++)
     312:	f1 2c       	mov	r15, r1
     314:	01 50       	subi	r16, 0x01	; 1
     316:	11 09       	sbc	r17, r1
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:216 (discriminator 1)
     318:	cf 2d       	mov	r28, r15
     31a:	d0 e0       	ldi	r29, 0x00	; 0
     31c:	c0 17       	cp	r28, r16
     31e:	d1 07       	cpc	r29, r17
     320:	0c f0       	brlt	.+2      	; 0x324 <receiveEvent(int)+0x28>
     322:	45 c0       	rjmp	.+138    	; 0x3ae <receiveEvent(int)+0xb2>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:218
  {
    byte temp = Wire.read(); //We might record it, we might throw it away
     324:	87 e5       	ldi	r24, 0x57	; 87
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	0f d2       	rcall	.+1054   	; 0x748 <TwoWire::read()>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:220

    if ( (x + registerNumber) < sizeof(memoryMap))
     32a:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
     32e:	9e 01       	movw	r18, r28
     330:	29 0f       	add	r18, r25
     332:	31 1d       	adc	r19, r1
     334:	28 30       	cpi	r18, 0x08	; 8
     336:	31 05       	cpc	r19, r1
     338:	c0 f5       	brcc	.+112    	; 0x3aa <receiveEvent(int)+0xae>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:224
    {
      //Clense the incoming byte against the read only protected bits
      //Store the result into the register map
      *(registerPointer + registerNumber + x) &= ~*(protectionPointer + registerNumber + x); //Clear this register if needed
     33a:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
     33e:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <__data_end>
     342:	ae 01       	movw	r20, r28
     344:	42 0f       	add	r20, r18
     346:	51 1d       	adc	r21, r1
     348:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <registerPointer>
     34c:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <registerPointer+0x1>
     350:	e4 0f       	add	r30, r20
     352:	f5 1f       	adc	r31, r21
     354:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__data_start>
     358:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__data_start+0x1>
     35c:	ac 0f       	add	r26, r28
     35e:	bd 1f       	adc	r27, r29
     360:	a9 0f       	add	r26, r25
     362:	b1 1d       	adc	r27, r1
     364:	2c 91       	ld	r18, X
     366:	30 e0       	ldi	r19, 0x00	; 0
     368:	20 95       	com	r18
     36a:	30 95       	com	r19
     36c:	40 81       	ld	r20, Z
     36e:	50 e0       	ldi	r21, 0x00	; 0
     370:	24 23       	and	r18, r20
     372:	35 23       	and	r19, r21
     374:	20 83       	st	Z, r18
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:225
      *(registerPointer + registerNumber + x) |= temp & *(protectionPointer + registerNumber + x); //Or in the user's request (clensed against protection bits)
     376:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <__data_end>
     37a:	20 91 94 00 	lds	r18, 0x0094	; 0x800094 <__data_end>
     37e:	ae 01       	movw	r20, r28
     380:	42 0f       	add	r20, r18
     382:	51 1d       	adc	r21, r1
     384:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <registerPointer>
     388:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <registerPointer+0x1>
     38c:	e4 0f       	add	r30, r20
     38e:	f5 1f       	adc	r31, r21
     390:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
     394:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__data_start+0x1>
     398:	c2 0f       	add	r28, r18
     39a:	d3 1f       	adc	r29, r19
     39c:	c9 0f       	add	r28, r25
     39e:	d1 1d       	adc	r29, r1
     3a0:	98 81       	ld	r25, Y
     3a2:	89 23       	and	r24, r25
     3a4:	90 81       	ld	r25, Z
     3a6:	98 2b       	or	r25, r24
     3a8:	90 83       	st	Z, r25
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:216 (discriminator 2)
{
  registerNumber = Wire.read(); //Get the memory map offset from the user

  //Begin recording the following incoming bytes to the temp memory map
  //starting at the registerNumber (the first byte received)
  for (byte x = 0 ; x < numberOfBytesReceived - 1 ; x++)
     3aa:	f3 94       	inc	r15
     3ac:	b5 cf       	rjmp	.-150    	; 0x318 <receiveEvent(int)+0x1c>
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:230
      *(registerPointer + registerNumber + x) |= temp & *(protectionPointer + registerNumber + x); //Or in the user's request (clensed against protection bits)
    }
  }

  recordSystemSettings();
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:229
      *(registerPointer + registerNumber + x) &= ~*(protectionPointer + registerNumber + x); //Clear this register if needed
      *(registerPointer + registerNumber + x) |= temp & *(protectionPointer + registerNumber + x); //Or in the user's request (clensed against protection bits)
    }
  }

  recordSystemSettings();
     3b8:	87 cf       	rjmp	.-242    	; 0x2c8 <recordSystemSettings()>

000003ba <_GLOBAL__sub_I_newestPress>:
_GLOBAL__sub_I_newestPress():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:355
    EEPROM.write(LOCATION_I2C_ADDRESS, registerMap.i2cAddress);
    startI2C(); //Determine the I2C address we should be using and begin listening on I2C bus
    //Serial.print("New Address: 0x");
    //Serial.println(registerMap.i2cAddress, HEX);
  }
}
     3ba:	ef 92       	push	r14
     3bc:	0f 93       	push	r16
__static_initialization_and_destruction_0():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:83
byte rowPins[ROWS] = {10, 5, 3, 1};
//Keypad              5, 3, 1
byte colPins[COLS] = {8, 2, 0};

#endif
Keypad keypad = Keypad( makeKeymap(keys), rowPins, colPins, ROWS, COLS );
     3be:	83 e0       	ldi	r24, 0x03	; 3
     3c0:	e8 2e       	mov	r14, r24
     3c2:	04 e0       	ldi	r16, 0x04	; 4
     3c4:	24 e7       	ldi	r18, 0x74	; 116
     3c6:	30 e0       	ldi	r19, 0x00	; 0
     3c8:	47 e7       	ldi	r20, 0x77	; 119
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	6b e7       	ldi	r22, 0x7B	; 123
     3ce:	70 e0       	ldi	r23, 0x00	; 0
     3d0:	85 e9       	ldi	r24, 0x95	; 149
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	ec d1       	rcall	.+984    	; 0x7ae <Keypad::Keypad(char*, unsigned char*, unsigned char*, unsigned char, unsigned char)>
_GLOBAL__sub_I_newestPress():
C:\Users\pete.lewis.SPARKFUN\Documents\GitHub\Qwiic_Keypad\Firmware\Qwiic_KeyPad/Qwiic_KeyPad.ino:355
    EEPROM.write(LOCATION_I2C_ADDRESS, registerMap.i2cAddress);
    startI2C(); //Determine the I2C address we should be using and begin listening on I2C bus
    //Serial.print("New Address: 0x");
    //Serial.println(registerMap.i2cAddress, HEX);
  }
}
     3d6:	0f 91       	pop	r16
     3d8:	ef 90       	pop	r14
     3da:	08 95       	ret

000003dc <Flush_TWI_Buffers>:
Flush_TWI_Buffers():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:153
// Check if there is an active data session.
unsigned char USI_TWI_Slave_Is_Active()
{
	// Active if Overflow Interrupt is enabled and no Stop Condition occurred
	return (USICR & (1 << USIOIE)) && ((USISR & (1 << USIPF)) == 0);
}
     3dc:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <TWI_RxTail>
     3e0:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <TWI_RxHead>
     3e4:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <TWI_TxTail>
     3e8:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <TWI_TxHead>
     3ec:	08 95       	ret

000003ee <USI_TWI_Slave_Initialise>:
USI_TWI_Slave_Initialise():
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	1f 92       	push	r1
     3f4:	cd b7       	in	r28, 0x3d	; 61
     3f6:	de b7       	in	r29, 0x3e	; 62
     3f8:	89 83       	std	Y+1, r24	; 0x01
     3fa:	f0 df       	rcall	.-32     	; 0x3dc <Flush_TWI_Buffers>
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <TWI_slaveAddress>
     402:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <USI_TWI_On_Slave_Transmit+0x1>
     406:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <USI_TWI_On_Slave_Transmit>
     40a:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <USI_TWI_On_Slave_Receive+0x1>
     40e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <USI_TWI_On_Slave_Receive>
     412:	dc 9a       	sbi	0x1b, 4	; 27
     414:	de 9a       	sbi	0x1b, 6	; 27
     416:	d4 9a       	sbi	0x1a, 4	; 26
     418:	d6 98       	cbi	0x1a, 6	; 26
     41a:	88 ea       	ldi	r24, 0xA8	; 168
     41c:	8d b9       	out	0x0d, r24	; 13
     41e:	80 ef       	ldi	r24, 0xF0	; 240
     420:	8e b9       	out	0x0e, r24	; 14
     422:	0f 90       	pop	r0
     424:	df 91       	pop	r29
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <USI_TWI_Slave_Disable>:
USI_TWI_Slave_Disable():
     42a:	d4 98       	cbi	0x1a, 4	; 26
     42c:	d6 98       	cbi	0x1a, 6	; 26
     42e:	1d b8       	out	0x0d, r1	; 13
     430:	80 ef       	ldi	r24, 0xF0	; 240
     432:	8e b9       	out	0x0e, r24	; 14
     434:	08 95       	ret

00000436 <USI_TWI_Transmit_Byte>:
USI_TWI_Transmit_Byte():
     436:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <TWI_TxHead>
     43a:	9f 5f       	subi	r25, 0xFF	; 255
     43c:	9f 70       	andi	r25, 0x0F	; 15
     43e:	20 91 51 01 	lds	r18, 0x0151	; 0x800151 <TWI_TxTail>
     442:	92 17       	cp	r25, r18
     444:	e1 f3       	breq	.-8      	; 0x43e <USI_TWI_Transmit_Byte+0x8>
     446:	e9 2f       	mov	r30, r25
     448:	f0 e0       	ldi	r31, 0x00	; 0
     44a:	e8 58       	subi	r30, 0x88	; 136
     44c:	fe 4f       	sbci	r31, 0xFE	; 254
     44e:	80 83       	st	Z, r24
     450:	90 93 52 01 	sts	0x0152, r25	; 0x800152 <TWI_TxHead>
     454:	08 95       	ret

00000456 <USI_TWI_Receive_Byte>:
USI_TWI_Receive_Byte():
     456:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <TWI_RxTail>
     45a:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <TWI_RxHead>
     45e:	98 17       	cp	r25, r24
     460:	e1 f3       	breq	.-8      	; 0x45a <USI_TWI_Receive_Byte+0x4>
     462:	e0 91 53 01 	lds	r30, 0x0153	; 0x800153 <TWI_RxTail>
     466:	ef 5f       	subi	r30, 0xFF	; 255
     468:	ef 70       	andi	r30, 0x0F	; 15
     46a:	e0 93 53 01 	sts	0x0153, r30	; 0x800153 <TWI_RxTail>
     46e:	f0 e0       	ldi	r31, 0x00	; 0
     470:	e8 59       	subi	r30, 0x98	; 152
     472:	fe 4f       	sbci	r31, 0xFE	; 254
     474:	80 81       	ld	r24, Z
     476:	08 95       	ret

00000478 <USI_TWI_Data_In_Receive_Buffer>:
USI_TWI_Data_In_Receive_Buffer():
     478:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <TWI_RxTail>
     47c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <TWI_RxHead>
     480:	89 1b       	sub	r24, r25
     482:	8f 70       	andi	r24, 0x0F	; 15
     484:	08 95       	ret

00000486 <USI_TWI_Space_In_Transmission_Buffer>:
USI_TWI_Space_In_Transmission_Buffer():
     486:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <TWI_TxHead>
     48a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <TWI_TxTail>
     48e:	9f 5f       	subi	r25, 0xFF	; 255
     490:	89 1b       	sub	r24, r25
     492:	8f 70       	andi	r24, 0x0F	; 15
     494:	08 95       	ret

00000496 <__vector_15>:
__vector_15():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:165
ISR(USI_START_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_START_VECTOR
__interrupt void USI_Start_Condition_ISR(void)
#endif
{
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	0f 93       	push	r16
     4a2:	1f 93       	push	r17
     4a4:	2f 93       	push	r18
     4a6:	3f 93       	push	r19
     4a8:	4f 93       	push	r20
     4aa:	5f 93       	push	r21
     4ac:	6f 93       	push	r22
     4ae:	7f 93       	push	r23
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	cf 93       	push	r28
     4ba:	ef 93       	push	r30
     4bc:	ff 93       	push	r31
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:169
	unsigned char tmpPin; // Temporary variable for pin state
	unsigned char tmpRxHead; // Temporary variable to store volatile
	// call slave receive callback on repeated start
	if (USI_TWI_On_Slave_Receive) {
     4be:	00 91 5b 01 	lds	r16, 0x015B	; 0x80015b <USI_TWI_On_Slave_Receive>
     4c2:	10 91 5c 01 	lds	r17, 0x015C	; 0x80015c <USI_TWI_On_Slave_Receive+0x1>
     4c6:	01 15       	cp	r16, r1
     4c8:	11 05       	cpc	r17, r1
     4ca:	61 f0       	breq	.+24     	; 0x4e4 <__vector_15+0x4e>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:170
		tmpRxHead = TWI_RxHead;
     4cc:	c0 91 54 01 	lds	r28, 0x0154	; 0x800154 <TWI_RxHead>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:171
		if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     4d0:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <TWI_RxTail>
     4d4:	8c 17       	cp	r24, r28
     4d6:	31 f0       	breq	.+12     	; 0x4e4 <__vector_15+0x4e>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:172
			USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     4d8:	cf df       	rcall	.-98     	; 0x478 <USI_TWI_Data_In_Receive_Buffer>
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	f8 01       	movw	r30, r16
     4de:	09 95       	icall
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:174
			// reset rx buffer
			TWI_RxTail = tmpRxHead;
     4e0:	c0 93 53 01 	sts	0x0153, r28	; 0x800153 <TWI_RxTail>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:178
		}
	}

	USI_TWI_Overflow_State = USI_SLAVE_CHECK_ADDRESS;
     4e4:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <USI_TWI_Overflow_State>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:179
	DDR_USI &= ~(1 << PORT_USI_SDA); // Set SDA as input
     4e8:	d6 98       	cbi	0x1a, 6	; 26
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:180 (discriminator 2)
	while ((tmpPin = (PIN_USI_CL & (1 << PORT_USI_SCL))) && ((PIN_USI & (1 << PIN_USI_SDA)) == 0))
     4ea:	cc 9b       	sbis	0x19, 4	; 25
     4ec:	04 c0       	rjmp	.+8      	; 0x4f6 <__vector_15+0x60>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:180 (discriminator 1)
     4ee:	ce 9b       	sbis	0x19, 6	; 25
     4f0:	fc cf       	rjmp	.-8      	; 0x4ea <__vector_15+0x54>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:185
		; // Wait for SCL to go low to ensure the "Start Condition" has completed.
	      // If a Stop condition arises then leave the interrupt to prevent waiting forever.
	if (tmpPin) {
		// Stop Condition (waiting for next Start Condition)
		USICR = (1 << USISIE) | (0 << USIOIE) | // Enable Start Condition Interrupt. Disable Overflow Interrupt.
     4f2:	88 ea       	ldi	r24, 0xA8	; 168
     4f4:	01 c0       	rjmp	.+2      	; 0x4f8 <__vector_15+0x62>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:192
		                                        // to first Start Condition (potentail failure)
		        (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
		        (0 << USITC);
	} else {
		// really Start Condition (Enable Overflow Interrupt)
		USICR = (1 << USISIE) | (1 << USIOIE)
     4f6:	88 ef       	ldi	r24, 0xF8	; 248
     4f8:	8d b9       	out	0x0d, r24	; 13
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:198
		        | // Enable Overflow and Start Condition Interrupt. (Keep StartCondInt to detect RESTART)
		        (1 << USIWM1) | (1 << USIWM0) |                 // Set USI in Two-wire mode.
		        (1 << USICS1) | (0 << USICS0) | (0 << USICLK) | // Shift Register Clock Source = External, positive edge
		        (0 << USITC);
	}
	USISR = (1 << USI_START_COND_INT) | (1 << USIOIF) | (1 << USIPF) | (1 << USIDC) | // Clear flags
     4fa:	80 ef       	ldi	r24, 0xF0	; 240
     4fc:	8e b9       	out	0x0e, r24	; 14
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:200
	        (0x0 << USICNT0); // Set USI to sample 8 bits i.e. count 16 external pin toggles.
}
     4fe:	ff 91       	pop	r31
     500:	ef 91       	pop	r30
     502:	cf 91       	pop	r28
     504:	bf 91       	pop	r27
     506:	af 91       	pop	r26
     508:	9f 91       	pop	r25
     50a:	8f 91       	pop	r24
     50c:	7f 91       	pop	r23
     50e:	6f 91       	pop	r22
     510:	5f 91       	pop	r21
     512:	4f 91       	pop	r20
     514:	3f 91       	pop	r19
     516:	2f 91       	pop	r18
     518:	1f 91       	pop	r17
     51a:	0f 91       	pop	r16
     51c:	0f 90       	pop	r0
     51e:	0f be       	out	0x3f, r0	; 63
     520:	0f 90       	pop	r0
     522:	1f 90       	pop	r1
     524:	18 95       	reti

00000526 <__vector_16>:
__vector_16():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:212
ISR(USI_OVERFLOW_VECTOR)
#elif __ICCAVR__
#pragma vector = USI_OVERFLOW_VECTOR
__interrupt void USI_Counter_Overflow_ISR(void)
#endif
{
     526:	1f 92       	push	r1
     528:	0f 92       	push	r0
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	0f 92       	push	r0
     52e:	11 24       	eor	r1, r1
     530:	0f 93       	push	r16
     532:	1f 93       	push	r17
     534:	2f 93       	push	r18
     536:	3f 93       	push	r19
     538:	4f 93       	push	r20
     53a:	5f 93       	push	r21
     53c:	6f 93       	push	r22
     53e:	7f 93       	push	r23
     540:	8f 93       	push	r24
     542:	9f 93       	push	r25
     544:	af 93       	push	r26
     546:	bf 93       	push	r27
     548:	cf 93       	push	r28
     54a:	ef 93       	push	r30
     54c:	ff 93       	push	r31
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:217
	unsigned char tmpRxHead;
	unsigned char tmpTxTail; // Temporary variables to store volatiles
	unsigned char tmpUSIDR;

	switch (USI_TWI_Overflow_State) {
     54e:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <USI_TWI_Overflow_State>
     552:	82 30       	cpi	r24, 0x02	; 2
     554:	09 f4       	brne	.+2      	; 0x558 <__vector_16+0x32>
     556:	4c c0       	rjmp	.+152    	; 0x5f0 <__vector_16+0xca>
     558:	28 f4       	brcc	.+10     	; 0x564 <__vector_16+0x3e>
     55a:	88 23       	and	r24, r24
     55c:	59 f0       	breq	.+22     	; 0x574 <__vector_16+0x4e>
     55e:	81 30       	cpi	r24, 0x01	; 1
     560:	51 f1       	breq	.+84     	; 0x5b6 <__vector_16+0x90>
     562:	83 c0       	rjmp	.+262    	; 0x66a <__vector_16+0x144>
     564:	84 30       	cpi	r24, 0x04	; 4
     566:	09 f4       	brne	.+2      	; 0x56a <__vector_16+0x44>
     568:	49 c0       	rjmp	.+146    	; 0x5fc <__vector_16+0xd6>
     56a:	10 f1       	brcs	.+68     	; 0x5b0 <__vector_16+0x8a>
     56c:	85 30       	cpi	r24, 0x05	; 5
     56e:	09 f4       	brne	.+2      	; 0x572 <__vector_16+0x4c>
     570:	64 c0       	rjmp	.+200    	; 0x63a <__vector_16+0x114>
     572:	7b c0       	rjmp	.+246    	; 0x66a <__vector_16+0x144>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:221
	// ---------- Address mode ----------
	// Check address and send ACK (and next USI_SLAVE_SEND_DATA) if OK, else reset USI.
	case USI_SLAVE_CHECK_ADDRESS:
		if ((USIDR == 0) || ((USIDR >> 1) == TWI_slaveAddress)) {
     574:	8f b1       	in	r24, 0x0f	; 15
     576:	88 23       	and	r24, r24
     578:	31 f0       	breq	.+12     	; 0x586 <__vector_16+0x60>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:221 (discriminator 1)
     57a:	8f b1       	in	r24, 0x0f	; 15
     57c:	86 95       	lsr	r24
     57e:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <TWI_slaveAddress>
     582:	89 13       	cpse	r24, r25
     584:	30 c0       	rjmp	.+96     	; 0x5e6 <__vector_16+0xc0>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:222
			if (USIDR & 0x01) {
     586:	78 9b       	sbis	0x0f, 0	; 15
     588:	0d c0       	rjmp	.+26     	; 0x5a4 <__vector_16+0x7e>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:223
				if (USI_TWI_On_Slave_Transmit) {
     58a:	e0 91 5d 01 	lds	r30, 0x015D	; 0x80015d <USI_TWI_On_Slave_Transmit>
     58e:	f0 91 5e 01 	lds	r31, 0x015E	; 0x80015e <USI_TWI_On_Slave_Transmit+0x1>
     592:	30 97       	sbiw	r30, 0x00	; 0
     594:	29 f0       	breq	.+10     	; 0x5a0 <__vector_16+0x7a>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:225
					// reset tx buffer and call callback
					tmpTxTail = TWI_TxHead;
     596:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <TWI_TxHead>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:226
					TWI_TxTail = tmpTxTail;
     59a:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <TWI_TxTail>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:227
					USI_TWI_On_Slave_Transmit();
     59e:	09 95       	icall
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:229
				}
				USI_TWI_Overflow_State = USI_SLAVE_SEND_DATA;
     5a0:	81 e0       	ldi	r24, 0x01	; 1
     5a2:	01 c0       	rjmp	.+2      	; 0x5a6 <__vector_16+0x80>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:231
			} else {
				USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     5a4:	84 e0       	ldi	r24, 0x04	; 4
     5a6:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USI_TWI_Overflow_State>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:233
			}
			SET_USI_TO_SEND_ACK();
     5aa:	1f b8       	out	0x0f, r1	; 15
     5ac:	d6 9a       	sbi	0x1a, 6	; 26
     5ae:	5b c0       	rjmp	.+182    	; 0x666 <__vector_16+0x140>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:242
		break;

	// ----- Master write data mode ------
	// Check reply and goto USI_SLAVE_SEND_DATA if OK, else reset USI.
	case USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA:
		if (USIDR) // If NACK, the master does not want more data.
     5b0:	8f b1       	in	r24, 0x0f	; 15
     5b2:	81 11       	cpse	r24, r1
     5b4:	18 c0       	rjmp	.+48     	; 0x5e6 <__vector_16+0xc0>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:253

	// Copy data from buffer to USIDR and set USI to shift byte. Next USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA
	case USI_SLAVE_SEND_DATA:

		// Get data from Buffer
		tmpTxTail = TWI_TxTail; // Not necessary, but prevents warnings
     5b6:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <TWI_TxTail>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:254
		if (TWI_TxHead != tmpTxTail) {
     5ba:	90 91 52 01 	lds	r25, 0x0152	; 0x800152 <TWI_TxHead>
     5be:	98 17       	cp	r25, r24
     5c0:	91 f0       	breq	.+36     	; 0x5e6 <__vector_16+0xc0>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:255
			TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
     5c2:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <TWI_TxTail>
     5c6:	8f 5f       	subi	r24, 0xFF	; 255
     5c8:	8f 70       	andi	r24, 0x0F	; 15
     5ca:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <TWI_TxTail>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:256
			USIDR      = TWI_TxBuf[TWI_TxTail];
     5ce:	e0 91 51 01 	lds	r30, 0x0151	; 0x800151 <TWI_TxTail>
     5d2:	f0 e0       	ldi	r31, 0x00	; 0
     5d4:	e8 58       	subi	r30, 0x88	; 136
     5d6:	fe 4f       	sbci	r31, 0xFE	; 254
     5d8:	80 81       	ld	r24, Z
     5da:	8f b9       	out	0x0f, r24	; 15
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:262
		} else // If the buffer is empty then:
		{
			SET_USI_TO_TWI_START_CONDITION_MODE();
			return;
		}
		USI_TWI_Overflow_State = USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA;
     5dc:	82 e0       	ldi	r24, 0x02	; 2
     5de:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USI_TWI_Overflow_State>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:263
		SET_USI_TO_SEND_DATA();
     5e2:	d6 9a       	sbi	0x1a, 6	; 26
     5e4:	03 c0       	rjmp	.+6      	; 0x5ec <__vector_16+0xc6>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:259
		if (TWI_TxHead != tmpTxTail) {
			TWI_TxTail = (TWI_TxTail + 1) & TWI_TX_BUFFER_MASK;
			USIDR      = TWI_TxBuf[TWI_TxTail];
		} else // If the buffer is empty then:
		{
			SET_USI_TO_TWI_START_CONDITION_MODE();
     5e6:	d6 98       	cbi	0x1a, 6	; 26
     5e8:	88 ea       	ldi	r24, 0xA8	; 168
     5ea:	8d b9       	out	0x0d, r24	; 13
     5ec:	80 e7       	ldi	r24, 0x70	; 112
     5ee:	3c c0       	rjmp	.+120    	; 0x668 <__vector_16+0x142>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:268
		SET_USI_TO_SEND_DATA();
		break;

	// Set USI to sample reply from master. Next USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA
	case USI_SLAVE_REQUEST_REPLY_FROM_SEND_DATA:
		USI_TWI_Overflow_State = USI_SLAVE_CHECK_REPLY_FROM_SEND_DATA;
     5f0:	83 e0       	ldi	r24, 0x03	; 3
     5f2:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USI_TWI_Overflow_State>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:269
		SET_USI_TO_READ_ACK();
     5f6:	d6 98       	cbi	0x1a, 6	; 26
     5f8:	1f b8       	out	0x0f, r1	; 15
     5fa:	35 c0       	rjmp	.+106    	; 0x666 <__vector_16+0x140>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:275
		break;

	// ----- Master read data mode ------
	// Set USI to sample data from master. Next USI_SLAVE_GET_DATA_AND_SEND_ACK.
	case USI_SLAVE_REQUEST_DATA:
		USI_TWI_Overflow_State = USI_SLAVE_GET_DATA_AND_SEND_ACK;
     5fc:	85 e0       	ldi	r24, 0x05	; 5
     5fe:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USI_TWI_Overflow_State>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:276
		SET_USI_TO_READ_DATA();
     602:	d6 98       	cbi	0x1a, 6	; 26
     604:	80 e7       	ldi	r24, 0x70	; 112
     606:	8e b9       	out	0x0e, r24	; 14
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:278
		// call slave receive callback on stop condition
		if (USI_TWI_On_Slave_Receive) {
     608:	00 91 5b 01 	lds	r16, 0x015B	; 0x80015b <USI_TWI_On_Slave_Receive>
     60c:	10 91 5c 01 	lds	r17, 0x015C	; 0x80015c <USI_TWI_On_Slave_Receive+0x1>
     610:	01 15       	cp	r16, r1
     612:	11 05       	cpc	r17, r1
     614:	51 f1       	breq	.+84     	; 0x66a <__vector_16+0x144>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:279
			tmpRxHead = TWI_RxHead;
     616:	c0 91 54 01 	lds	r28, 0x0154	; 0x800154 <TWI_RxHead>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:280
			if (TWI_RxTail != tmpRxHead) { // data in receive buffer
     61a:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <TWI_RxTail>
     61e:	8c 17       	cp	r24, r28
     620:	21 f1       	breq	.+72     	; 0x66a <__vector_16+0x144>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:282 (discriminator 1)
				// check for stop Condition
				while ((USISR & ((1 << USI_START_COND_INT) | (1 << USIPF) | (0xE << USICNT0))) == 0)
     622:	8e b1       	in	r24, 0x0e	; 14
     624:	8e 7a       	andi	r24, 0xAE	; 174
     626:	e9 f3       	breq	.-6      	; 0x622 <__vector_16+0xfc>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:285
					;// wait for either Start or Stop Condition
					// cancel after one SCL cycle
				if (USISR & (1 << USIPF)) { // Stop Condition
     628:	75 9b       	sbis	0x0e, 5	; 14
     62a:	1f c0       	rjmp	.+62     	; 0x66a <__vector_16+0x144>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:286
					USI_TWI_On_Slave_Receive(USI_TWI_Data_In_Receive_Buffer());
     62c:	25 df       	rcall	.-438    	; 0x478 <USI_TWI_Data_In_Receive_Buffer>
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	f8 01       	movw	r30, r16
     632:	09 95       	icall
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:288
					// reset rx buffer
					TWI_RxTail = tmpRxHead;
     634:	c0 93 53 01 	sts	0x0153, r28	; 0x800153 <TWI_RxTail>
     638:	18 c0       	rjmp	.+48     	; 0x66a <__vector_16+0x144>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:297
		break;

	// Copy data from USIDR and send ACK. Next USI_SLAVE_REQUEST_DATA
	case USI_SLAVE_GET_DATA_AND_SEND_ACK:
		// Put data into Buffer
		USI_TWI_Overflow_State = USI_SLAVE_REQUEST_DATA;
     63a:	84 e0       	ldi	r24, 0x04	; 4
     63c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <USI_TWI_Overflow_State>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:298
		tmpUSIDR              = USIDR; // Not necessary, but prevents warnings
     640:	9f b1       	in	r25, 0x0f	; 15
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:299
		tmpRxHead = (TWI_RxHead + 1) & TWI_RX_BUFFER_MASK;
     642:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <TWI_RxHead>
     646:	8f 5f       	subi	r24, 0xFF	; 255
     648:	8f 70       	andi	r24, 0x0F	; 15
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:300
		if (TWI_RxTail != tmpRxHead) {
     64a:	20 91 53 01 	lds	r18, 0x0153	; 0x800153 <TWI_RxTail>
     64e:	28 17       	cp	r18, r24
     650:	49 f0       	breq	.+18     	; 0x664 <__vector_16+0x13e>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:301
			TWI_RxHead            = tmpRxHead;
     652:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <TWI_RxHead>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:302
			TWI_RxBuf[TWI_RxHead] = tmpUSIDR;
     656:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <TWI_RxHead>
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	e8 59       	subi	r30, 0x98	; 152
     65e:	fe 4f       	sbci	r31, 0xFE	; 254
     660:	90 83       	st	Z, r25
     662:	a3 cf       	rjmp	.-186    	; 0x5aa <__vector_16+0x84>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:306
			SET_USI_TO_SEND_ACK();
		} else // If the buffer is full then:
		{
			SET_USI_TO_SEND_NACK();
     664:	d6 98       	cbi	0x1a, 6	; 26
     666:	8e e7       	ldi	r24, 0x7E	; 126
     668:	8e b9       	out	0x0e, r24	; 14
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src\USI_TWI_Slave/USI_TWI_Slave.c:310
		}
		break;
	}
}
     66a:	ff 91       	pop	r31
     66c:	ef 91       	pop	r30
     66e:	cf 91       	pop	r28
     670:	bf 91       	pop	r27
     672:	af 91       	pop	r26
     674:	9f 91       	pop	r25
     676:	8f 91       	pop	r24
     678:	7f 91       	pop	r23
     67a:	6f 91       	pop	r22
     67c:	5f 91       	pop	r21
     67e:	4f 91       	pop	r20
     680:	3f 91       	pop	r19
     682:	2f 91       	pop	r18
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	0f 90       	pop	r0
     68a:	0f be       	out	0x3f, r0	; 63
     68c:	0f 90       	pop	r0
     68e:	1f 90       	pop	r1
     690:	18 95       	reti

00000692 <TwoWire::begin(unsigned char)>:
_ZN7TwoWire5beginEh():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:585
  }

  return value;
}

void TwoWire::flush(void) {
     692:	86 2f       	mov	r24, r22
     694:	ac ce       	rjmp	.-680    	; 0x3ee <USI_TWI_Slave_Initialise>

00000696 <TwoWire::begin(int)>:
_ZN7TwoWire5beginEi():
     696:	86 2f       	mov	r24, r22
_ZN7TwoWire5beginEh():
     698:	aa ce       	rjmp	.-684    	; 0x3ee <USI_TWI_Slave_Initialise>

0000069a <TwoWire::end()>:
_ZN7TwoWire3endEv():
     69a:	c7 ce       	rjmp	.-626    	; 0x42a <USI_TWI_Slave_Disable>

0000069c <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
     69c:	cf 93       	push	r28
     69e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <TwoWire::transmitting>
     6a2:	88 23       	and	r24, r24
     6a4:	c1 f0       	breq	.+48     	; 0x6d6 <TwoWire::write(unsigned char)+0x3a>
     6a6:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <TwoWire::BufferLength>
     6aa:	80 32       	cpi	r24, 0x20	; 32
     6ac:	18 f0       	brcs	.+6      	; 0x6b4 <TwoWire::write(unsigned char)+0x18>
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	19 c0       	rjmp	.+50     	; 0x6e6 <TwoWire::write(unsigned char)+0x4a>
     6b4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <TwoWire::BufferIndex>
     6b8:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <TwoWire::Buffer>
     6bc:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <TwoWire::Buffer+0x1>
     6c0:	e8 0f       	add	r30, r24
     6c2:	f1 1d       	adc	r31, r1
     6c4:	60 83       	st	Z, r22
     6c6:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <TwoWire::BufferIndex>
     6ca:	8f 5f       	subi	r24, 0xFF	; 255
     6cc:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <TwoWire::BufferIndex>
     6d0:	80 93 59 01 	sts	0x0159, r24	; 0x800159 <TwoWire::BufferLength>
     6d4:	06 c0       	rjmp	.+12     	; 0x6e2 <TwoWire::write(unsigned char)+0x46>
     6d6:	c6 2f       	mov	r28, r22
     6d8:	d6 de       	rcall	.-596    	; 0x486 <USI_TWI_Space_In_Transmission_Buffer>
     6da:	88 23       	and	r24, r24
     6dc:	41 f3       	breq	.-48     	; 0x6ae <TwoWire::write(unsigned char)+0x12>
     6de:	8c 2f       	mov	r24, r28
     6e0:	aa de       	rcall	.-684    	; 0x436 <USI_TWI_Transmit_Byte>
     6e2:	81 e0       	ldi	r24, 0x01	; 1
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	cf 91       	pop	r28
     6e8:	08 95       	ret

000006ea <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
     6ea:	cf 92       	push	r12
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	6c 01       	movw	r12, r24
     6fc:	eb 01       	movw	r28, r22
     6fe:	7b 01       	movw	r14, r22
     700:	e4 0e       	add	r14, r20
     702:	f5 1e       	adc	r15, r21
     704:	00 e0       	ldi	r16, 0x00	; 0
     706:	10 e0       	ldi	r17, 0x00	; 0
     708:	ce 15       	cp	r28, r14
     70a:	df 05       	cpc	r29, r15
     70c:	31 f0       	breq	.+12     	; 0x71a <TwoWire::write(unsigned char const*, unsigned int)+0x30>
     70e:	69 91       	ld	r22, Y+
     710:	c6 01       	movw	r24, r12
     712:	c4 df       	rcall	.-120    	; 0x69c <TwoWire::write(unsigned char)>
     714:	08 0f       	add	r16, r24
     716:	19 1f       	adc	r17, r25
     718:	f7 cf       	rjmp	.-18     	; 0x708 <TwoWire::write(unsigned char const*, unsigned int)+0x1e>
     71a:	c8 01       	movw	r24, r16
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	ff 90       	pop	r15
     726:	ef 90       	pop	r14
     728:	df 90       	pop	r13
     72a:	cf 90       	pop	r12
     72c:	08 95       	ret

0000072e <TwoWire::available()>:
_ZN7TwoWire9availableEv():
     72e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <TwoWire::BufferLength>
     732:	88 23       	and	r24, r24
     734:	31 f0       	breq	.+12     	; 0x742 <TwoWire::available()+0x14>
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <TwoWire::BufferIndex>
     73c:	82 1b       	sub	r24, r18
     73e:	91 09       	sbc	r25, r1
     740:	08 95       	ret
     742:	9a de       	rcall	.-716    	; 0x478 <USI_TWI_Data_In_Receive_Buffer>
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	08 95       	ret

00000748 <TwoWire::read()>:
_ZN7TwoWire4readEv():
     748:	f2 df       	rcall	.-28     	; 0x72e <TwoWire::available()>
     74a:	89 2b       	or	r24, r25
     74c:	a9 f0       	breq	.+42     	; 0x778 <TwoWire::read()+0x30>
     74e:	80 91 59 01 	lds	r24, 0x0159	; 0x800159 <TwoWire::BufferLength>
     752:	88 23       	and	r24, r24
     754:	71 f0       	breq	.+28     	; 0x772 <TwoWire::read()+0x2a>
     756:	20 91 5a 01 	lds	r18, 0x015A	; 0x80015a <TwoWire::BufferIndex>
     75a:	e0 91 87 00 	lds	r30, 0x0087	; 0x800087 <TwoWire::Buffer>
     75e:	f0 91 88 00 	lds	r31, 0x0088	; 0x800088 <TwoWire::Buffer+0x1>
     762:	e2 0f       	add	r30, r18
     764:	f1 1d       	adc	r31, r1
     766:	80 81       	ld	r24, Z
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	2f 5f       	subi	r18, 0xFF	; 255
     76c:	20 93 5a 01 	sts	0x015A, r18	; 0x80015a <TwoWire::BufferIndex>
     770:	08 95       	ret
     772:	71 de       	rcall	.-798    	; 0x456 <USI_TWI_Receive_Byte>
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	08 95       	ret
     778:	8f ef       	ldi	r24, 0xFF	; 255
     77a:	9f ef       	ldi	r25, 0xFF	; 255
     77c:	08 95       	ret

0000077e <TwoWire::onReceive(void (*)(int))>:
_ZN7TwoWire9onReceiveEPFviE():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:591
  // XXX: to be implemented.
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) ) {
  USI_TWI_On_Slave_Receive = function;
     77e:	70 93 5c 01 	sts	0x015C, r23	; 0x80015c <USI_TWI_On_Slave_Receive+0x1>
     782:	60 93 5b 01 	sts	0x015B, r22	; 0x80015b <USI_TWI_On_Slave_Receive>
     786:	08 95       	ret

00000788 <TwoWire::onRequest(void (*)())>:
_ZN7TwoWire9onRequestEPFvvE():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\libraries\Wire\src/Wire.cpp:596
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) ) {
  USI_TWI_On_Slave_Transmit = function;
     788:	70 93 5e 01 	sts	0x015E, r23	; 0x80015e <USI_TWI_On_Slave_Transmit+0x1>
     78c:	60 93 5d 01 	sts	0x015D, r22	; 0x80015d <USI_TWI_On_Slave_Transmit>
     790:	08 95       	ret

00000792 <Key::Key()>:
_ZN3KeyC2Ev():
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Key.cpp:34
*/
#include <Key.h>


// default constructor
Key::Key() {
     792:	fc 01       	movw	r30, r24
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Key.cpp:35
	kchar = NO_KEY;
     794:	10 82       	st	Z, r1
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Key.cpp:36
	kstate = IDLE;
     796:	14 82       	std	Z+4, r1	; 0x04
     798:	13 82       	std	Z+3, r1	; 0x03
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Key.cpp:37
	stateChanged = false;
     79a:	15 82       	std	Z+5, r1	; 0x05
     79c:	08 95       	ret

0000079e <Keypad::pin_read(unsigned char)>:
_ZN6Keypad8pin_readEh():
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:244
void Keypad::setHoldTime(uint hold) {
    holdTime = hold;
}

void Keypad::addEventListener(void (*listener)(char)){
	keypadEventListener = listener;
     79e:	86 2f       	mov	r24, r22
     7a0:	52 c4       	rjmp	.+2212   	; 0x1046 <digitalRead>

000007a2 <Keypad::pin_write(unsigned char, unsigned char)>:
_ZN6Keypad9pin_writeEhh():
     7a2:	86 2f       	mov	r24, r22
     7a4:	64 2f       	mov	r22, r20
     7a6:	15 c4       	rjmp	.+2090   	; 0xfd2 <digitalWrite>

000007a8 <Keypad::pin_mode(unsigned char, unsigned char)>:
_ZN6Keypad8pin_modeEhh():
     7a8:	86 2f       	mov	r24, r22
     7aa:	64 2f       	mov	r22, r20
     7ac:	d4 c3       	rjmp	.+1960   	; 0xf56 <pinMode>

000007ae <Keypad::Keypad(char*, unsigned char*, unsigned char*, unsigned char, unsigned char)>:
_ZN6KeypadC2EPcPhS1_hh():
     7ae:	4f 92       	push	r4
     7b0:	5f 92       	push	r5
     7b2:	6f 92       	push	r6
     7b4:	7f 92       	push	r7
     7b6:	8f 92       	push	r8
     7b8:	9f 92       	push	r9
     7ba:	af 92       	push	r10
     7bc:	bf 92       	push	r11
     7be:	cf 92       	push	r12
     7c0:	df 92       	push	r13
     7c2:	ef 92       	push	r14
     7c4:	0f 93       	push	r16
     7c6:	cf 93       	push	r28
     7c8:	df 93       	push	r29
     7ca:	ec 01       	movw	r28, r24
     7cc:	5b 01       	movw	r10, r22
     7ce:	3a 01       	movw	r6, r20
     7d0:	49 01       	movw	r8, r18
     7d2:	02 96       	adiw	r24, 0x02	; 2
     7d4:	de df       	rcall	.-68     	; 0x792 <Key::Key()>
     7d6:	8d e8       	ldi	r24, 0x8D	; 141
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	99 83       	std	Y+1, r25	; 0x01
     7dc:	88 83       	st	Y, r24
     7de:	6e 01       	movw	r12, r28
     7e0:	8c e1       	ldi	r24, 0x1C	; 28
     7e2:	c8 0e       	add	r12, r24
     7e4:	d1 1c       	adc	r13, r1
     7e6:	2e 01       	movw	r4, r28
     7e8:	88 e5       	ldi	r24, 0x58	; 88
     7ea:	48 0e       	add	r4, r24
     7ec:	51 1c       	adc	r5, r1
     7ee:	c6 01       	movw	r24, r12
     7f0:	d0 df       	rcall	.-96     	; 0x792 <Key::Key()>
     7f2:	86 e0       	ldi	r24, 0x06	; 6
     7f4:	c8 0e       	add	r12, r24
     7f6:	d1 1c       	adc	r13, r1
     7f8:	c4 14       	cp	r12, r4
     7fa:	d5 04       	cpc	r13, r5
     7fc:	c1 f7       	brne	.-16     	; 0x7ee <Keypad::Keypad(char*, unsigned char*, unsigned char*, unsigned char, unsigned char)+0x40>
     7fe:	fe 01       	movw	r30, r28
     800:	ee 59       	subi	r30, 0x9E	; 158
     802:	ff 4f       	sbci	r31, 0xFF	; 255
     804:	71 82       	std	Z+1, r7	; 0x01
     806:	60 82       	st	Z, r6
     808:	32 96       	adiw	r30, 0x02	; 2
     80a:	91 82       	std	Z+1, r9	; 0x01
     80c:	80 82       	st	Z, r8
     80e:	32 96       	adiw	r30, 0x02	; 2
     810:	00 83       	st	Z, r16
     812:	31 96       	adiw	r30, 0x01	; 1
     814:	e0 82       	st	Z, r14
_ZN6Keypad5beginEPc():
     816:	37 97       	sbiw	r30, 0x07	; 7
     818:	b1 82       	std	Z+1, r11	; 0x01
     81a:	a0 82       	st	Z, r10
_ZN6Keypad15setDebounceTimeEj():
     81c:	38 96       	adiw	r30, 0x08	; 8
     81e:	8a e0       	ldi	r24, 0x0A	; 10
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	91 83       	std	Z+1, r25	; 0x01
     824:	80 83       	st	Z, r24
_ZN6Keypad11setHoldTimeEj():
     826:	32 96       	adiw	r30, 0x02	; 2
     828:	84 ef       	ldi	r24, 0xF4	; 244
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	91 83       	std	Z+1, r25	; 0x01
     82e:	80 83       	st	Z, r24
_ZN6KeypadC2EPcPhS1_hh():
     830:	33 96       	adiw	r30, 0x03	; 3
     832:	11 82       	std	Z+1, r1	; 0x01
     834:	10 82       	st	Z, r1
     836:	71 97       	sbiw	r30, 0x11	; 17
     838:	10 82       	st	Z, r1
     83a:	11 82       	std	Z+1, r1	; 0x01
     83c:	12 82       	std	Z+2, r1	; 0x02
     83e:	13 82       	std	Z+3, r1	; 0x03
     840:	c4 59       	subi	r28, 0x94	; 148
     842:	df 4f       	sbci	r29, 0xFF	; 255
     844:	18 82       	st	Y, r1
     846:	df 91       	pop	r29
     848:	cf 91       	pop	r28
     84a:	0f 91       	pop	r16
     84c:	ef 90       	pop	r14
     84e:	df 90       	pop	r13
     850:	cf 90       	pop	r12
     852:	bf 90       	pop	r11
     854:	af 90       	pop	r10
     856:	9f 90       	pop	r9
     858:	8f 90       	pop	r8
     85a:	7f 90       	pop	r7
     85c:	6f 90       	pop	r6
     85e:	5f 90       	pop	r5
     860:	4f 90       	pop	r4
     862:	08 95       	ret

00000864 <Keypad::scanKeys()>:
_ZN6Keypad8scanKeysEv():
     864:	2f 92       	push	r2
     866:	3f 92       	push	r3
     868:	4f 92       	push	r4
     86a:	5f 92       	push	r5
     86c:	6f 92       	push	r6
     86e:	7f 92       	push	r7
     870:	8f 92       	push	r8
     872:	9f 92       	push	r9
     874:	af 92       	push	r10
     876:	bf 92       	push	r11
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	0f 93       	push	r16
     882:	1f 93       	push	r17
     884:	cf 93       	push	r28
     886:	df 93       	push	r29
     888:	cd b7       	in	r28, 0x3d	; 61
     88a:	de b7       	in	r29, 0x3e	; 62
     88c:	28 97       	sbiw	r28, 0x08	; 8
     88e:	0f b6       	in	r0, 0x3f	; 63
     890:	f8 94       	cli
     892:	de bf       	out	0x3e, r29	; 62
     894:	0f be       	out	0x3f, r0	; 63
     896:	cd bf       	out	0x3d, r28	; 61
     898:	98 87       	std	Y+8, r25	; 0x08
     89a:	8f 83       	std	Y+7, r24	; 0x07
     89c:	10 e0       	ldi	r17, 0x00	; 0
     89e:	4c 01       	movw	r8, r24
     8a0:	86 e6       	ldi	r24, 0x66	; 102
     8a2:	88 0e       	add	r8, r24
     8a4:	91 1c       	adc	r9, r1
     8a6:	ef 80       	ldd	r14, Y+7	; 0x07
     8a8:	f8 84       	ldd	r15, Y+8	; 0x08
     8aa:	92 e6       	ldi	r25, 0x62	; 98
     8ac:	e9 0e       	add	r14, r25
     8ae:	f1 1c       	adc	r15, r1
     8b0:	d4 01       	movw	r26, r8
     8b2:	8c 91       	ld	r24, X
     8b4:	18 17       	cp	r17, r24
     8b6:	a0 f4       	brcc	.+40     	; 0x8e0 <Keypad::scanKeys()+0x7c>
     8b8:	af 81       	ldd	r26, Y+7	; 0x07
     8ba:	b8 85       	ldd	r27, Y+8	; 0x08
     8bc:	8d 91       	ld	r24, X+
     8be:	9c 91       	ld	r25, X
     8c0:	f7 01       	movw	r30, r14
     8c2:	a0 81       	ld	r26, Z
     8c4:	b1 81       	ldd	r27, Z+1	; 0x01
     8c6:	a1 0f       	add	r26, r17
     8c8:	b1 1d       	adc	r27, r1
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 81       	ld	r18, Z
     8ce:	31 81       	ldd	r19, Z+1	; 0x01
     8d0:	42 e0       	ldi	r20, 0x02	; 2
     8d2:	6c 91       	ld	r22, X
     8d4:	8f 81       	ldd	r24, Y+7	; 0x07
     8d6:	98 85       	ldd	r25, Y+8	; 0x08
     8d8:	f9 01       	movw	r30, r18
     8da:	09 95       	icall
     8dc:	1f 5f       	subi	r17, 0xFF	; 255
     8de:	e8 cf       	rjmp	.-48     	; 0x8b0 <Keypad::scanKeys()+0x4c>
     8e0:	f1 2c       	mov	r15, r1
     8e2:	ef 81       	ldd	r30, Y+7	; 0x07
     8e4:	f8 85       	ldd	r31, Y+8	; 0x08
     8e6:	e9 59       	subi	r30, 0x99	; 153
     8e8:	ff 4f       	sbci	r31, 0xFF	; 255
     8ea:	fa 83       	std	Y+2, r31	; 0x02
     8ec:	e9 83       	std	Y+1, r30	; 0x01
     8ee:	cf 80       	ldd	r12, Y+7	; 0x07
     8f0:	d8 84       	ldd	r13, Y+8	; 0x08
     8f2:	f4 e6       	ldi	r31, 0x64	; 100
     8f4:	cf 0e       	add	r12, r31
     8f6:	d1 1c       	adc	r13, r1
     8f8:	41 2c       	mov	r4, r1
     8fa:	51 2c       	mov	r5, r1
     8fc:	32 01       	movw	r6, r4
     8fe:	43 94       	inc	r4
     900:	8f 81       	ldd	r24, Y+7	; 0x07
     902:	98 85       	ldd	r25, Y+8	; 0x08
     904:	8e 59       	subi	r24, 0x9E	; 158
     906:	9f 4f       	sbci	r25, 0xFF	; 255
     908:	9c 83       	std	Y+4, r25	; 0x04
     90a:	8b 83       	std	Y+3, r24	; 0x03
     90c:	e9 81       	ldd	r30, Y+1	; 0x01
     90e:	fa 81       	ldd	r31, Y+2	; 0x02
     910:	80 81       	ld	r24, Z
     912:	f8 16       	cp	r15, r24
     914:	08 f0       	brcs	.+2      	; 0x918 <Keypad::scanKeys()+0xb4>
     916:	88 c0       	rjmp	.+272    	; 0xa28 <Keypad::scanKeys()+0x1c4>
     918:	af 2c       	mov	r10, r15
     91a:	b1 2c       	mov	r11, r1
     91c:	af 81       	ldd	r26, Y+7	; 0x07
     91e:	b8 85       	ldd	r27, Y+8	; 0x08
     920:	8d 91       	ld	r24, X+
     922:	9c 91       	ld	r25, X
     924:	f6 01       	movw	r30, r12
     926:	a0 81       	ld	r26, Z
     928:	b1 81       	ldd	r27, Z+1	; 0x01
     92a:	aa 0d       	add	r26, r10
     92c:	bb 1d       	adc	r27, r11
     92e:	fc 01       	movw	r30, r24
     930:	20 81       	ld	r18, Z
     932:	31 81       	ldd	r19, Z+1	; 0x01
     934:	41 e0       	ldi	r20, 0x01	; 1
     936:	6c 91       	ld	r22, X
     938:	8f 81       	ldd	r24, Y+7	; 0x07
     93a:	98 85       	ldd	r25, Y+8	; 0x08
     93c:	f9 01       	movw	r30, r18
     93e:	09 95       	icall
     940:	af 81       	ldd	r26, Y+7	; 0x07
     942:	b8 85       	ldd	r27, Y+8	; 0x08
     944:	8d 91       	ld	r24, X+
     946:	9c 91       	ld	r25, X
     948:	f6 01       	movw	r30, r12
     94a:	a0 81       	ld	r26, Z
     94c:	b1 81       	ldd	r27, Z+1	; 0x01
     94e:	aa 0d       	add	r26, r10
     950:	bb 1d       	adc	r27, r11
     952:	fc 01       	movw	r30, r24
     954:	22 81       	ldd	r18, Z+2	; 0x02
     956:	33 81       	ldd	r19, Z+3	; 0x03
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	6c 91       	ld	r22, X
     95c:	8f 81       	ldd	r24, Y+7	; 0x07
     95e:	98 85       	ldd	r25, Y+8	; 0x08
     960:	f9 01       	movw	r30, r18
     962:	09 95       	icall
     964:	d3 01       	movw	r26, r6
     966:	c2 01       	movw	r24, r4
     968:	0f 2c       	mov	r0, r15
     96a:	04 c0       	rjmp	.+8      	; 0x974 <Keypad::scanKeys()+0x110>
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	aa 1f       	adc	r26, r26
     972:	bb 1f       	adc	r27, r27
     974:	0a 94       	dec	r0
     976:	d2 f7       	brpl	.-12     	; 0x96c <Keypad::scanKeys()+0x108>
     978:	9c 01       	movw	r18, r24
     97a:	1c 01       	movw	r2, r24
     97c:	20 94       	com	r2
     97e:	30 94       	com	r3
     980:	e1 2c       	mov	r14, r1
     982:	f4 01       	movw	r30, r8
     984:	80 81       	ld	r24, Z
     986:	af 81       	ldd	r26, Y+7	; 0x07
     988:	b8 85       	ldd	r27, Y+8	; 0x08
     98a:	ed 91       	ld	r30, X+
     98c:	fc 91       	ld	r31, X
     98e:	e8 16       	cp	r14, r24
     990:	48 f5       	brcc	.+82     	; 0x9e4 <Keypad::scanKeys()+0x180>
     992:	0e 2d       	mov	r16, r14
     994:	10 e0       	ldi	r17, 0x00	; 0
     996:	ab 81       	ldd	r26, Y+3	; 0x03
     998:	bc 81       	ldd	r27, Y+4	; 0x04
     99a:	8d 91       	ld	r24, X+
     99c:	9c 91       	ld	r25, X
     99e:	dc 01       	movw	r26, r24
     9a0:	a0 0f       	add	r26, r16
     9a2:	b1 1f       	adc	r27, r17
     9a4:	04 80       	ldd	r0, Z+4	; 0x04
     9a6:	f5 81       	ldd	r31, Z+5	; 0x05
     9a8:	e0 2d       	mov	r30, r0
     9aa:	6c 91       	ld	r22, X
     9ac:	8f 81       	ldd	r24, Y+7	; 0x07
     9ae:	98 85       	ldd	r25, Y+8	; 0x08
     9b0:	2d 83       	std	Y+5, r18	; 0x05
     9b2:	3e 83       	std	Y+6, r19	; 0x06
     9b4:	09 95       	icall
     9b6:	00 0f       	add	r16, r16
     9b8:	11 1f       	adc	r17, r17
     9ba:	2d 81       	ldd	r18, Y+5	; 0x05
     9bc:	3e 81       	ldd	r19, Y+6	; 0x06
     9be:	ef 81       	ldd	r30, Y+7	; 0x07
     9c0:	f8 85       	ldd	r31, Y+8	; 0x08
     9c2:	e0 0f       	add	r30, r16
     9c4:	f1 1f       	adc	r31, r17
     9c6:	89 2b       	or	r24, r25
     9c8:	29 f4       	brne	.+10     	; 0x9d4 <Keypad::scanKeys()+0x170>
     9ca:	80 85       	ldd	r24, Z+8	; 0x08
     9cc:	91 85       	ldd	r25, Z+9	; 0x09
     9ce:	82 2b       	or	r24, r18
     9d0:	93 2b       	or	r25, r19
     9d2:	04 c0       	rjmp	.+8      	; 0x9dc <Keypad::scanKeys()+0x178>
     9d4:	80 85       	ldd	r24, Z+8	; 0x08
     9d6:	91 85       	ldd	r25, Z+9	; 0x09
     9d8:	82 21       	and	r24, r2
     9da:	93 21       	and	r25, r3
     9dc:	91 87       	std	Z+9, r25	; 0x09
     9de:	80 87       	std	Z+8, r24	; 0x08
     9e0:	e3 94       	inc	r14
     9e2:	cf cf       	rjmp	.-98     	; 0x982 <Keypad::scanKeys()+0x11e>
     9e4:	d6 01       	movw	r26, r12
     9e6:	8d 91       	ld	r24, X+
     9e8:	9c 91       	ld	r25, X
     9ea:	dc 01       	movw	r26, r24
     9ec:	aa 0d       	add	r26, r10
     9ee:	bb 1d       	adc	r27, r11
     9f0:	02 80       	ldd	r0, Z+2	; 0x02
     9f2:	f3 81       	ldd	r31, Z+3	; 0x03
     9f4:	e0 2d       	mov	r30, r0
     9f6:	41 e0       	ldi	r20, 0x01	; 1
     9f8:	6c 91       	ld	r22, X
     9fa:	8f 81       	ldd	r24, Y+7	; 0x07
     9fc:	98 85       	ldd	r25, Y+8	; 0x08
     9fe:	09 95       	icall
     a00:	af 81       	ldd	r26, Y+7	; 0x07
     a02:	b8 85       	ldd	r27, Y+8	; 0x08
     a04:	ed 91       	ld	r30, X+
     a06:	fc 91       	ld	r31, X
     a08:	d6 01       	movw	r26, r12
     a0a:	8d 91       	ld	r24, X+
     a0c:	9c 91       	ld	r25, X
     a0e:	dc 01       	movw	r26, r24
     a10:	aa 0d       	add	r26, r10
     a12:	bb 1d       	adc	r27, r11
     a14:	01 90       	ld	r0, Z+
     a16:	f0 81       	ld	r31, Z
     a18:	e0 2d       	mov	r30, r0
     a1a:	40 e0       	ldi	r20, 0x00	; 0
     a1c:	6c 91       	ld	r22, X
     a1e:	8f 81       	ldd	r24, Y+7	; 0x07
     a20:	98 85       	ldd	r25, Y+8	; 0x08
     a22:	09 95       	icall
     a24:	f3 94       	inc	r15
     a26:	72 cf       	rjmp	.-284    	; 0x90c <Keypad::scanKeys()+0xa8>
     a28:	28 96       	adiw	r28, 0x08	; 8
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	1f 91       	pop	r17
     a3a:	0f 91       	pop	r16
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	bf 90       	pop	r11
     a46:	af 90       	pop	r10
     a48:	9f 90       	pop	r9
     a4a:	8f 90       	pop	r8
     a4c:	7f 90       	pop	r7
     a4e:	6f 90       	pop	r6
     a50:	5f 90       	pop	r5
     a52:	4f 90       	pop	r4
     a54:	3f 90       	pop	r3
     a56:	2f 90       	pop	r2
     a58:	08 95       	ret

00000a5a <Keypad::findInList(int)>:
_ZN6Keypad10findInListEi():
     a5a:	fc 01       	movw	r30, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	25 8d       	ldd	r18, Z+29	; 0x1d
     a62:	36 8d       	ldd	r19, Z+30	; 0x1e
     a64:	26 17       	cp	r18, r22
     a66:	37 07       	cpc	r19, r23
     a68:	39 f0       	breq	.+14     	; 0xa78 <Keypad::findInList(int)+0x1e>
     a6a:	01 96       	adiw	r24, 0x01	; 1
     a6c:	36 96       	adiw	r30, 0x06	; 6
     a6e:	8a 30       	cpi	r24, 0x0A	; 10
     a70:	91 05       	cpc	r25, r1
     a72:	b1 f7       	brne	.-20     	; 0xa60 <Keypad::findInList(int)+0x6>
     a74:	8f ef       	ldi	r24, 0xFF	; 255
     a76:	9f ef       	ldi	r25, 0xFF	; 255
     a78:	08 95       	ret

00000a7a <Keypad::transitionTo(unsigned char, KeyState)>:
_ZN6Keypad12transitionToEh8KeyState():
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:247
}

void Keypad::transitionTo(byte idx, KeyState nextState) {
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	dc 01       	movw	r26, r24
     a82:	c6 2f       	mov	r28, r22
     a84:	8a 01       	movw	r16, r20
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:248
	key[idx].kstate = nextState;
     a86:	26 2f       	mov	r18, r22
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	c9 01       	movw	r24, r18
     a8c:	66 e0       	ldi	r22, 0x06	; 6
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	04 d3       	rcall	.+1544   	; 0x109a <__mulhi3>
     a92:	fd 01       	movw	r30, r26
     a94:	e8 0f       	add	r30, r24
     a96:	f9 1f       	adc	r31, r25
     a98:	10 a3       	std	Z+32, r17	; 0x20
     a9a:	07 8f       	std	Z+31, r16	; 0x1f
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:249
	key[idx].stateChanged = true;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	81 a3       	std	Z+33, r24	; 0x21
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:253

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
     aa0:	fd 01       	movw	r30, r26
     aa2:	e4 59       	subi	r30, 0x94	; 148
     aa4:	ff 4f       	sbci	r31, 0xFF	; 255
     aa6:	80 81       	ld	r24, Z
     aa8:	31 96       	adiw	r30, 0x01	; 1
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:254
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
     aaa:	01 90       	ld	r0, Z+
     aac:	f0 81       	ld	r31, Z
     aae:	e0 2d       	mov	r30, r0
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:253
	key[idx].kstate = nextState;
	key[idx].stateChanged = true;

	// Sketch used the getKey() function.
	// Calls keypadEventListener only when the first key in slot 0 changes state.
	if (single_key)  {
     ab0:	88 23       	and	r24, r24
     ab2:	29 f0       	breq	.+10     	; 0xabe <Keypad::transitionTo(unsigned char, KeyState)+0x44>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:254
	  	if ( (keypadEventListener!=NULL) && (idx==0) )  {
     ab4:	30 97       	sbiw	r30, 0x00	; 0
     ab6:	89 f0       	breq	.+34     	; 0xada <Keypad::transitionTo(unsigned char, KeyState)+0x60>
     ab8:	c1 11       	cpse	r28, r1
     aba:	0f c0       	rjmp	.+30     	; 0xada <Keypad::transitionTo(unsigned char, KeyState)+0x60>
     abc:	08 c0       	rjmp	.+16     	; 0xace <Keypad::transitionTo(unsigned char, KeyState)+0x54>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:261
		}
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
     abe:	30 97       	sbiw	r30, 0x00	; 0
     ac0:	61 f0       	breq	.+24     	; 0xada <Keypad::transitionTo(unsigned char, KeyState)+0x60>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:262
			keypadEventListener(key[idx].kchar);
     ac2:	c9 01       	movw	r24, r18
     ac4:	66 e0       	ldi	r22, 0x06	; 6
     ac6:	70 e0       	ldi	r23, 0x00	; 0
     ac8:	e8 d2       	rcall	.+1488   	; 0x109a <__mulhi3>
     aca:	a8 0f       	add	r26, r24
     acc:	b9 1f       	adc	r27, r25
     ace:	5c 96       	adiw	r26, 0x1c	; 28
     ad0:	8c 91       	ld	r24, X
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:265
		}
	}
}
     ad2:	cf 91       	pop	r28
     ad4:	1f 91       	pop	r17
     ad6:	0f 91       	pop	r16
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:262
	}
	// Sketch used the getKeys() function.
	// Calls keypadEventListener on any key that changes state.
	else {
	  	if (keypadEventListener!=NULL)  {
			keypadEventListener(key[idx].kchar);
     ad8:	09 94       	ijmp
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:265
		}
	}
}
     ada:	cf 91       	pop	r28
     adc:	1f 91       	pop	r17
     ade:	0f 91       	pop	r16
     ae0:	08 95       	ret

00000ae2 <Keypad::nextKeyState(unsigned char, unsigned char)>:
_ZN6Keypad12nextKeyStateEhh():
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:152
	return anyActivity;
}

// Private
// This function is a state machine but is also used for debouncing the keys.
void Keypad::nextKeyState(byte idx, boolean button) {
     ae2:	6f 92       	push	r6
     ae4:	7f 92       	push	r7
     ae6:	8f 92       	push	r8
     ae8:	9f 92       	push	r9
     aea:	af 92       	push	r10
     aec:	bf 92       	push	r11
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
     af6:	1f 93       	push	r17
     af8:	cf 93       	push	r28
     afa:	df 93       	push	r29
     afc:	1f 92       	push	r1
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	3c 01       	movw	r6, r24
     b04:	16 2f       	mov	r17, r22
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:153
	key[idx].stateChanged = false;
     b06:	86 2f       	mov	r24, r22
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	66 e0       	ldi	r22, 0x06	; 6
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	c5 d2       	rcall	.+1418   	; 0x109a <__mulhi3>
     b10:	f3 01       	movw	r30, r6
     b12:	e8 0f       	add	r30, r24
     b14:	f9 1f       	adc	r31, r25
     b16:	11 a2       	std	Z+33, r1	; 0x21
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:155

	switch (key[idx].kstate) {
     b18:	87 8d       	ldd	r24, Z+31	; 0x1f
     b1a:	90 a1       	ldd	r25, Z+32	; 0x20
     b1c:	81 30       	cpi	r24, 0x01	; 1
     b1e:	91 05       	cpc	r25, r1
     b20:	f1 f0       	breq	.+60     	; 0xb5e <Keypad::nextKeyState(unsigned char, unsigned char)+0x7c>
     b22:	1c f4       	brge	.+6      	; 0xb2a <Keypad::nextKeyState(unsigned char, unsigned char)+0x48>
     b24:	89 2b       	or	r24, r25
     b26:	51 f0       	breq	.+20     	; 0xb3c <Keypad::nextKeyState(unsigned char, unsigned char)+0x5a>
     b28:	4c c0       	rjmp	.+152    	; 0xbc2 <Keypad::nextKeyState(unsigned char, unsigned char)+0xe0>
     b2a:	82 30       	cpi	r24, 0x02	; 2
     b2c:	91 05       	cpc	r25, r1
     b2e:	a1 f1       	breq	.+104    	; 0xb98 <Keypad::nextKeyState(unsigned char, unsigned char)+0xb6>
     b30:	03 97       	sbiw	r24, 0x03	; 3
     b32:	09 f0       	breq	.+2      	; 0xb36 <Keypad::nextKeyState(unsigned char, unsigned char)+0x54>
     b34:	46 c0       	rjmp	.+140    	; 0xbc2 <Keypad::nextKeyState(unsigned char, unsigned char)+0xe0>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:172
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	50 e0       	ldi	r21, 0x00	; 0
     b3a:	32 c0       	rjmp	.+100    	; 0xba0 <Keypad::nextKeyState(unsigned char, unsigned char)+0xbe>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:157
void Keypad::nextKeyState(byte idx, boolean button) {
	key[idx].stateChanged = false;

	switch (key[idx].kstate) {
		case IDLE:
			if (button==CLOSED) {
     b3c:	41 30       	cpi	r20, 0x01	; 1
     b3e:	09 f0       	breq	.+2      	; 0xb42 <Keypad::nextKeyState(unsigned char, unsigned char)+0x60>
     b40:	40 c0       	rjmp	.+128    	; 0xbc2 <Keypad::nextKeyState(unsigned char, unsigned char)+0xe0>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:158
				transitionTo (idx, PRESSED);
     b42:	41 e0       	ldi	r20, 0x01	; 1
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	61 2f       	mov	r22, r17
     b48:	c3 01       	movw	r24, r6
     b4a:	97 df       	rcall	.-210    	; 0xa7a <Keypad::transitionTo(unsigned char, KeyState)>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:159
				holdTimer = millis(); }		// Get ready for next HOLD state.
     b4c:	c1 d1       	rcall	.+898    	; 0xed0 <millis>
     b4e:	f3 01       	movw	r30, r6
     b50:	e8 5a       	subi	r30, 0xA8	; 168
     b52:	ff 4f       	sbci	r31, 0xFF	; 255
     b54:	60 83       	st	Z, r22
     b56:	71 83       	std	Z+1, r23	; 0x01
     b58:	82 83       	std	Z+2, r24	; 0x02
     b5a:	93 83       	std	Z+3, r25	; 0x03
     b5c:	32 c0       	rjmp	.+100    	; 0xbc2 <Keypad::nextKeyState(unsigned char, unsigned char)+0xe0>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:162
			break;
		case PRESSED:
			if ((millis()-holdTimer)>holdTime)	// Waiting for a key HOLD...
     b5e:	49 83       	std	Y+1, r20	; 0x01
     b60:	b7 d1       	rcall	.+878    	; 0xed0 <millis>
     b62:	f3 01       	movw	r30, r6
     b64:	e8 5a       	subi	r30, 0xA8	; 168
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	c0 80       	ld	r12, Z
     b6a:	d1 80       	ldd	r13, Z+1	; 0x01
     b6c:	e2 80       	ldd	r14, Z+2	; 0x02
     b6e:	f3 80       	ldd	r15, Z+3	; 0x03
     b70:	4b 01       	movw	r8, r22
     b72:	5c 01       	movw	r10, r24
     b74:	8c 18       	sub	r8, r12
     b76:	9d 08       	sbc	r9, r13
     b78:	ae 08       	sbc	r10, r14
     b7a:	bf 08       	sbc	r11, r15
     b7c:	72 96       	adiw	r30, 0x12	; 18
     b7e:	80 81       	ld	r24, Z
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	a0 e0       	ldi	r26, 0x00	; 0
     b84:	b0 e0       	ldi	r27, 0x00	; 0
     b86:	49 81       	ldd	r20, Y+1	; 0x01
     b88:	88 15       	cp	r24, r8
     b8a:	99 05       	cpc	r25, r9
     b8c:	aa 05       	cpc	r26, r10
     b8e:	bb 05       	cpc	r27, r11
     b90:	18 f4       	brcc	.+6      	; 0xb98 <Keypad::nextKeyState(unsigned char, unsigned char)+0xb6>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:163
				transitionTo (idx, HOLD);
     b92:	42 e0       	ldi	r20, 0x02	; 2
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <Keypad::nextKeyState(unsigned char, unsigned char)+0xbe>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:164
			else if (button==OPEN)				// or for a key to be RELEASED.
     b98:	41 11       	cpse	r20, r1
     b9a:	13 c0       	rjmp	.+38     	; 0xbc2 <Keypad::nextKeyState(unsigned char, unsigned char)+0xe0>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:165
				transitionTo (idx, RELEASED);
     b9c:	43 e0       	ldi	r20, 0x03	; 3
     b9e:	50 e0       	ldi	r21, 0x00	; 0
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:172
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
     ba0:	61 2f       	mov	r22, r17
     ba2:	c3 01       	movw	r24, r6
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:175
			break;
	}
}
     ba4:	0f 90       	pop	r0
     ba6:	df 91       	pop	r29
     ba8:	cf 91       	pop	r28
     baa:	1f 91       	pop	r17
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	bf 90       	pop	r11
     bb6:	af 90       	pop	r10
     bb8:	9f 90       	pop	r9
     bba:	8f 90       	pop	r8
     bbc:	7f 90       	pop	r7
     bbe:	6f 90       	pop	r6
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:172
		case HOLD:
			if (button==OPEN)
				transitionTo (idx, RELEASED);
			break;
		case RELEASED:
			transitionTo (idx, IDLE);
     bc0:	5c cf       	rjmp	.-328    	; 0xa7a <Keypad::transitionTo(unsigned char, KeyState)>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:175
			break;
	}
}
     bc2:	0f 90       	pop	r0
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	bf 90       	pop	r11
     bd4:	af 90       	pop	r10
     bd6:	9f 90       	pop	r9
     bd8:	8f 90       	pop	r8
     bda:	7f 90       	pop	r7
     bdc:	6f 90       	pop	r6
     bde:	08 95       	ret

00000be0 <Keypad::updateList()>:
_ZN6Keypad10updateListEv():
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:103
		pin_mode(columnPins[c],INPUT);
	}
}

// Manage the list without rearranging the keys. Returns true if any keys on the list changed state.
bool Keypad::updateList() {
     be0:	3f 92       	push	r3
     be2:	4f 92       	push	r4
     be4:	5f 92       	push	r5
     be6:	6f 92       	push	r6
     be8:	7f 92       	push	r7
     bea:	8f 92       	push	r8
     bec:	9f 92       	push	r9
     bee:	af 92       	push	r10
     bf0:	bf 92       	push	r11
     bf2:	cf 92       	push	r12
     bf4:	df 92       	push	r13
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	00 d0       	rcall	.+0      	; 0xc04 <Keypad::updateList()+0x24>
     c04:	1f 92       	push	r1
     c06:	cd b7       	in	r28, 0x3d	; 61
     c08:	de b7       	in	r29, 0x3e	; 62
     c0a:	9b 83       	std	Y+3, r25	; 0x03
     c0c:	8a 83       	std	Y+2, r24	; 0x02
     c0e:	fc 01       	movw	r30, r24
     c10:	7c 96       	adiw	r30, 0x1c	; 28
     c12:	88 5a       	subi	r24, 0xA8	; 168
     c14:	9f 4f       	sbci	r25, 0xFF	; 255
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:111

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].kstate==IDLE) {
			key[i].kchar = NO_KEY;
			key[i].kcode = -1;
     c16:	2f ef       	ldi	r18, 0xFF	; 255
     c18:	3f ef       	ldi	r19, 0xFF	; 255
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:109

	bool anyActivity = false;

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].kstate==IDLE) {
     c1a:	43 81       	ldd	r20, Z+3	; 0x03
     c1c:	54 81       	ldd	r21, Z+4	; 0x04
     c1e:	45 2b       	or	r20, r21
     c20:	21 f4       	brne	.+8      	; 0xc2a <Keypad::updateList()+0x4a>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:110
			key[i].kchar = NO_KEY;
     c22:	10 82       	st	Z, r1
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:111
			key[i].kcode = -1;
     c24:	32 83       	std	Z+2, r19	; 0x02
     c26:	21 83       	std	Z+1, r18	; 0x01
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:112
			key[i].stateChanged = false;
     c28:	15 82       	std	Z+5, r1	; 0x05
     c2a:	36 96       	adiw	r30, 0x06	; 6
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:108 (discriminator 2)
bool Keypad::updateList() {

	bool anyActivity = false;

	// Delete any IDLE keys
	for (byte i=0; i<LIST_MAX; i++) {
     c2c:	e8 17       	cp	r30, r24
     c2e:	f9 07       	cpc	r31, r25
     c30:	a1 f7       	brne	.-24     	; 0xc1a <Keypad::updateList()+0x3a>
     c32:	41 2c       	mov	r4, r1
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:117
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
     c34:	ca 80       	ldd	r12, Y+2	; 0x02
     c36:	db 80       	ldd	r13, Y+3	; 0x03
     c38:	26 e6       	ldi	r18, 0x66	; 102
     c3a:	c2 0e       	add	r12, r18
     c3c:	d1 1c       	adc	r13, r1
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:118
		for (byte c=0; c<sizeKpd.columns; c++) {
     c3e:	aa 80       	ldd	r10, Y+2	; 0x02
     c40:	bb 80       	ldd	r11, Y+3	; 0x03
     c42:	87 e6       	ldi	r24, 0x67	; 103
     c44:	a8 0e       	add	r10, r24
     c46:	b1 1c       	adc	r11, r1
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:120
			boolean button = bitRead(bitMap[r],c);
			char keyChar = keymap[r * sizeKpd.columns + c];
     c48:	8a 80       	ldd	r8, Y+2	; 0x02
     c4a:	9b 80       	ldd	r9, Y+3	; 0x03
     c4c:	90 e6       	ldi	r25, 0x60	; 96
     c4e:	89 0e       	add	r8, r25
     c50:	91 1c       	adc	r9, r1
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:117 (discriminator 1)
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
     c52:	f6 01       	movw	r30, r12
     c54:	80 81       	ld	r24, Z
     c56:	48 16       	cp	r4, r24
     c58:	08 f0       	brcs	.+2      	; 0xc5c <Keypad::updateList()+0x7c>
     c5a:	5a c0       	rjmp	.+180    	; 0xd10 <Keypad::updateList()+0x130>
     c5c:	51 2c       	mov	r5, r1
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:119
		for (byte c=0; c<sizeKpd.columns; c++) {
			boolean button = bitRead(bitMap[r],c);
     c5e:	e4 2c       	mov	r14, r4
     c60:	f1 2c       	mov	r15, r1
     c62:	87 01       	movw	r16, r14
     c64:	0c 5f       	subi	r16, 0xFC	; 252
     c66:	1f 4f       	sbci	r17, 0xFF	; 255
     c68:	00 0f       	add	r16, r16
     c6a:	11 1f       	adc	r17, r17
     c6c:	ea 81       	ldd	r30, Y+2	; 0x02
     c6e:	fb 81       	ldd	r31, Y+3	; 0x03
     c70:	0e 0f       	add	r16, r30
     c72:	1f 1f       	adc	r17, r31
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:118 (discriminator 1)
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
     c74:	d5 01       	movw	r26, r10
     c76:	6c 91       	ld	r22, X
     c78:	56 16       	cp	r5, r22
     c7a:	08 f0       	brcs	.+2      	; 0xc7e <Keypad::updateList()+0x9e>
     c7c:	47 c0       	rjmp	.+142    	; 0xd0c <Keypad::updateList()+0x12c>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:119
			boolean button = bitRead(bitMap[r],c);
     c7e:	d8 01       	movw	r26, r16
     c80:	4d 91       	ld	r20, X+
     c82:	5c 91       	ld	r21, X
     c84:	05 2c       	mov	r0, r5
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <Keypad::updateList()+0xac>
     c88:	56 95       	lsr	r21
     c8a:	47 95       	ror	r20
     c8c:	0a 94       	dec	r0
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <Keypad::updateList()+0xa8>
     c90:	41 70       	andi	r20, 0x01	; 1
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:120
			char keyChar = keymap[r * sizeKpd.columns + c];
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	c7 01       	movw	r24, r14
     c96:	01 d2       	rcall	.+1026   	; 0x109a <__mulhi3>
     c98:	3c 01       	movw	r6, r24
     c9a:	65 0c       	add	r6, r5
     c9c:	71 1c       	adc	r7, r1
     c9e:	d4 01       	movw	r26, r8
     ca0:	ed 91       	ld	r30, X+
     ca2:	fc 91       	ld	r31, X
     ca4:	e6 0d       	add	r30, r6
     ca6:	f7 1d       	adc	r31, r7
     ca8:	30 80       	ld	r3, Z
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:122
			int keyCode = r * sizeKpd.columns + c;
			int idx = findInList (keyCode);
     caa:	b3 01       	movw	r22, r6
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	9b 81       	ldd	r25, Y+3	; 0x03
     cb0:	49 83       	std	Y+1, r20	; 0x01
     cb2:	d3 de       	rcall	.-602    	; 0xa5a <Keypad::findInList(int)>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:124
			// Key is already on the list so set its next state.
			if (idx > -1)	{
     cb4:	49 81       	ldd	r20, Y+1	; 0x01
     cb6:	97 fd       	sbrc	r25, 7
     cb8:	02 c0       	rjmp	.+4      	; 0xcbe <Keypad::updateList()+0xde>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:125
				nextKeyState(idx, button);
     cba:	68 2f       	mov	r22, r24
     cbc:	1c c0       	rjmp	.+56     	; 0xcf6 <Keypad::updateList()+0x116>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:128
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	19 f5       	brne	.+70     	; 0xd08 <Keypad::updateList()+0x128>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:128 (discriminator 1)
     cc2:	44 23       	and	r20, r20
     cc4:	09 f1       	breq	.+66     	; 0xd08 <Keypad::updateList()+0x128>
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	c9 01       	movw	r24, r18
     ccc:	66 e0       	ldi	r22, 0x06	; 6
     cce:	70 e0       	ldi	r23, 0x00	; 0
     cd0:	e4 d1       	rcall	.+968    	; 0x109a <__mulhi3>
     cd2:	ea 81       	ldd	r30, Y+2	; 0x02
     cd4:	fb 81       	ldd	r31, Y+3	; 0x03
     cd6:	e8 0f       	add	r30, r24
     cd8:	f9 1f       	adc	r31, r25
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:130
				for (byte i=0; i<LIST_MAX; i++) {
					if (key[i].kchar==NO_KEY) {		// Find an empty slot or don't add key to list.
     cda:	44 8d       	ldd	r20, Z+28	; 0x1c
     cdc:	41 11       	cpse	r20, r1
     cde:	0f c0       	rjmp	.+30     	; 0xcfe <Keypad::updateList()+0x11e>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:131
						key[i].kchar = keyChar;
     ce0:	34 8e       	std	Z+28, r3	; 0x1c
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:132
						key[i].kcode = keyCode;
     ce2:	76 8e       	std	Z+30, r7	; 0x1e
     ce4:	65 8e       	std	Z+29, r6	; 0x1d
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:133
						key[i].kstate = IDLE;		// Keys NOT on the list have an initial state of IDLE.
     ce6:	ea 81       	ldd	r30, Y+2	; 0x02
     ce8:	fb 81       	ldd	r31, Y+3	; 0x03
     cea:	e8 0f       	add	r30, r24
     cec:	f9 1f       	adc	r31, r25
     cee:	10 a2       	std	Z+32, r1	; 0x20
     cf0:	17 8e       	std	Z+31, r1	; 0x1f
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:134
						nextKeyState (i, button);
     cf2:	41 e0       	ldi	r20, 0x01	; 1
     cf4:	62 2f       	mov	r22, r18
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	9b 81       	ldd	r25, Y+3	; 0x03
     cfa:	f3 de       	rcall	.-538    	; 0xae2 <Keypad::nextKeyState(unsigned char, unsigned char)>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:135
						break;	// Don't fill all the empty slots with the same key.
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <Keypad::updateList()+0x128>
     cfe:	2f 5f       	subi	r18, 0xFF	; 255
     d00:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:129 (discriminator 2)
			if (idx > -1)	{
				nextKeyState(idx, button);
			}
			// Key is NOT on the list so add it.
			if ((idx == -1) && button) {
				for (byte i=0; i<LIST_MAX; i++) {
     d02:	2a 30       	cpi	r18, 0x0A	; 10
     d04:	31 05       	cpc	r19, r1
     d06:	09 f7       	brne	.-62     	; 0xcca <Keypad::updateList()+0xea>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:118 (discriminator 2)
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
		for (byte c=0; c<sizeKpd.columns; c++) {
     d08:	53 94       	inc	r5
     d0a:	b4 cf       	rjmp	.-152    	; 0xc74 <Keypad::updateList()+0x94>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:117 (discriminator 2)
			key[i].stateChanged = false;
		}
	}

	// Add new keys to empty slots in the key list.
	for (byte r=0; r<sizeKpd.rows; r++) {
     d0c:	43 94       	inc	r4
     d0e:	a1 cf       	rjmp	.-190    	; 0xc52 <Keypad::updateList()+0x72>
     d10:	ea 81       	ldd	r30, Y+2	; 0x02
     d12:	fb 81       	ldd	r31, Y+3	; 0x03
     d14:	b1 96       	adiw	r30, 0x21	; 33
     d16:	2a 81       	ldd	r18, Y+2	; 0x02
     d18:	3b 81       	ldd	r19, Y+3	; 0x03
     d1a:	23 5a       	subi	r18, 0xA3	; 163
     d1c:	3f 4f       	sbci	r19, 0xFF	; 255
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:117
     d1e:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:144
		}
	}

	// Report if the user changed the state of any key.
	for (byte i=0; i<LIST_MAX; i++) {
		if (key[i].stateChanged) anyActivity = true;
     d20:	90 81       	ld	r25, Z
     d22:	91 11       	cpse	r25, r1
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	36 96       	adiw	r30, 0x06	; 6
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:143 (discriminator 2)
			}
		}
	}

	// Report if the user changed the state of any key.
	for (byte i=0; i<LIST_MAX; i++) {
     d28:	e2 17       	cp	r30, r18
     d2a:	f3 07       	cpc	r31, r19
     d2c:	c9 f7       	brne	.-14     	; 0xd20 <Keypad::updateList()+0x140>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:148
		if (key[i].stateChanged) anyActivity = true;
	}

	return anyActivity;
}
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	df 91       	pop	r29
     d36:	cf 91       	pop	r28
     d38:	1f 91       	pop	r17
     d3a:	0f 91       	pop	r16
     d3c:	ff 90       	pop	r15
     d3e:	ef 90       	pop	r14
     d40:	df 90       	pop	r13
     d42:	cf 90       	pop	r12
     d44:	bf 90       	pop	r11
     d46:	af 90       	pop	r10
     d48:	9f 90       	pop	r9
     d4a:	8f 90       	pop	r8
     d4c:	7f 90       	pop	r7
     d4e:	6f 90       	pop	r6
     d50:	5f 90       	pop	r5
     d52:	4f 90       	pop	r4
     d54:	3f 90       	pop	r3
     d56:	08 95       	ret

00000d58 <Keypad::getKeys()>:
_ZN6Keypad7getKeysEv():
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:69

	return NO_KEY;
}

// Populate the key list.
bool Keypad::getKeys() {
     d58:	cf 92       	push	r12
     d5a:	df 92       	push	r13
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:73
	bool keyActivity = false;

	// Limit how often the keypad is scanned. This makes the loop() run 10 times as fast.
	if ( (millis()-startTime)>debounceTime ) {
     d6a:	b2 d0       	rcall	.+356    	; 0xed0 <millis>
     d6c:	8e 01       	movw	r16, r28
     d6e:	04 5a       	subi	r16, 0xA4	; 164
     d70:	1f 4f       	sbci	r17, 0xFF	; 255
     d72:	f8 01       	movw	r30, r16
     d74:	c0 80       	ld	r12, Z
     d76:	d1 80       	ldd	r13, Z+1	; 0x01
     d78:	e2 80       	ldd	r14, Z+2	; 0x02
     d7a:	f3 80       	ldd	r15, Z+3	; 0x03
     d7c:	ab 01       	movw	r20, r22
     d7e:	bc 01       	movw	r22, r24
     d80:	4c 19       	sub	r20, r12
     d82:	5d 09       	sbc	r21, r13
     d84:	6e 09       	sbc	r22, r14
     d86:	7f 09       	sbc	r23, r15
     d88:	3c 96       	adiw	r30, 0x0c	; 12
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	a0 e0       	ldi	r26, 0x00	; 0
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	84 17       	cp	r24, r20
     d94:	95 07       	cpc	r25, r21
     d96:	a6 07       	cpc	r26, r22
     d98:	b7 07       	cpc	r27, r23
     d9a:	60 f4       	brcc	.+24     	; 0xdb4 <Keypad::getKeys()+0x5c>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:74
		scanKeys();
     d9c:	ce 01       	movw	r24, r28
     d9e:	62 dd       	rcall	.-1340   	; 0x864 <Keypad::scanKeys()>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:75
		keyActivity = updateList();
     da0:	ce 01       	movw	r24, r28
     da2:	1e df       	rcall	.-452    	; 0xbe0 <Keypad::updateList()>
     da4:	c8 2f       	mov	r28, r24
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:76
		startTime = millis();
     da6:	94 d0       	rcall	.+296    	; 0xed0 <millis>
     da8:	f8 01       	movw	r30, r16
     daa:	60 83       	st	Z, r22
     dac:	71 83       	std	Z+1, r23	; 0x01
     dae:	82 83       	std	Z+2, r24	; 0x02
     db0:	93 83       	std	Z+3, r25	; 0x03
     db2:	01 c0       	rjmp	.+2      	; 0xdb6 <Keypad::getKeys()+0x5e>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:70
	return NO_KEY;
}

// Populate the key list.
bool Keypad::getKeys() {
	bool keyActivity = false;
     db4:	c0 e0       	ldi	r28, 0x00	; 0
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:80
		keyActivity = updateList();
		startTime = millis();
	}

	return keyActivity;
}
     db6:	8c 2f       	mov	r24, r28
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	ff 90       	pop	r15
     dc2:	ef 90       	pop	r14
     dc4:	df 90       	pop	r13
     dc6:	cf 90       	pop	r12
     dc8:	08 95       	ret

00000dca <Keypad::getKey()>:
_ZN6Keypad6getKeyEv():
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:57
void Keypad::begin(char *userKeymap) {
    keymap = userKeymap;
}

// Returns a single key only. Retained for backwards compatibility.
char Keypad::getKey() {
     dca:	0f 93       	push	r16
     dcc:	1f 93       	push	r17
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	ec 01       	movw	r28, r24
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:58
	single_key = true;
     dd4:	8c 01       	movw	r16, r24
     dd6:	04 59       	subi	r16, 0x94	; 148
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	f8 01       	movw	r30, r16
     dde:	80 83       	st	Z, r24
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:60

	if (getKeys() && key[0].stateChanged && (key[0].kstate==PRESSED))
     de0:	ce 01       	movw	r24, r28
     de2:	ba df       	rcall	.-140    	; 0xd58 <Keypad::getKeys()>
     de4:	88 23       	and	r24, r24
     de6:	49 f0       	breq	.+18     	; 0xdfa <Keypad::getKey()+0x30>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:60 (discriminator 1)
     de8:	89 a1       	ldd	r24, Y+33	; 0x21
     dea:	88 23       	and	r24, r24
     dec:	31 f0       	breq	.+12     	; 0xdfa <Keypad::getKey()+0x30>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:60 (discriminator 3)
     dee:	8f 8d       	ldd	r24, Y+31	; 0x1f
     df0:	98 a1       	ldd	r25, Y+32	; 0x20
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	11 f4       	brne	.+4      	; 0xdfa <Keypad::getKey()+0x30>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:61
		return key[0].kchar;
     df6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     df8:	03 c0       	rjmp	.+6      	; 0xe00 <Keypad::getKey()+0x36>
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:63
	
	single_key = false;
     dfa:	f8 01       	movw	r30, r16
     dfc:	10 82       	st	Z, r1
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:65

	return NO_KEY;
     dfe:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\pete.lewis.SPARKFUN\Documents\Arduino\libraries\Keypad\src/Keypad.cpp:66
}
     e00:	df 91       	pop	r29
     e02:	cf 91       	pop	r28
     e04:	1f 91       	pop	r17
     e06:	0f 91       	pop	r16
     e08:	08 95       	ret

00000e0a <main>:
main():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/main.cpp:6
#include <Arduino.h>

int main(void)
{
	#ifdef TUNED_OSCCAL_VALUE
	OSCCAL = TUNED_OSCCAL_VALUE; //set the oscillator calibration value based on the pins_arduino.h file. If this is not set, it will be optimised away
     e0a:	81 b7       	in	r24, 0x31	; 49
     e0c:	81 bf       	out	0x31, r24	; 49
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/main.cpp:8
    #endif
    init();
     e0e:	6c d0       	rcall	.+216    	; 0xee8 <init>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/main.cpp:10

	setup();
     e10:	48 da       	rcall	.-2928   	; 0x2a2 <setup>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/main.cpp:13 (discriminator 1)
    
	for (;;)
		loop();
     e12:	49 d9       	rcall	.-3438   	; 0xa6 <loop>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/main.cpp:3 (discriminator 1)
#include <Arduino.h>

int main(void)
     e14:	fe cf       	rjmp	.-4      	; 0xe12 <main+0x8>

00000e16 <initToneTimerInternal>:
initToneTimerInternal():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:590
PLLCSR |= PCKE;
}
#endif
  #if INITIALIZE_SECONDARY_TIMERS
  // Prepare the timer for PWM
    initToneTimerInternal();
     e16:	8e b5       	in	r24, 0x2e	; 46
     e18:	88 7f       	andi	r24, 0xF8	; 248
     e1a:	8e bd       	out	0x2e, r24	; 46
     e1c:	8f b5       	in	r24, 0x2f	; 47
     e1e:	81 60       	ori	r24, 0x01	; 1
     e20:	8f bd       	out	0x2f, r24	; 47
     e22:	8f b5       	in	r24, 0x2f	; 47
     e24:	8d 7f       	andi	r24, 0xFD	; 253
     e26:	8f bd       	out	0x2f, r24	; 47
     e28:	8e b5       	in	r24, 0x2e	; 46
     e2a:	87 7f       	andi	r24, 0xF7	; 247
     e2c:	8e bd       	out	0x2e, r24	; 46
     e2e:	8e b5       	in	r24, 0x2e	; 46
     e30:	8f 7e       	andi	r24, 0xEF	; 239
     e32:	8e bd       	out	0x2e, r24	; 46
     e34:	8e b5       	in	r24, 0x2e	; 46
     e36:	83 60       	ori	r24, 0x03	; 3
     e38:	8e bd       	out	0x2e, r24	; 46
     e3a:	08 95       	ret

00000e3c <__vector_11>:
__vector_11():
     e3c:	1f 92       	push	r1
     e3e:	0f 92       	push	r0
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	0f 92       	push	r0
     e44:	11 24       	eor	r1, r1
     e46:	2f 93       	push	r18
     e48:	3f 93       	push	r19
     e4a:	8f 93       	push	r24
     e4c:	9f 93       	push	r25
     e4e:	af 93       	push	r26
     e50:	bf 93       	push	r27
     e52:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <millis_timer_millis>
     e56:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <millis_timer_millis+0x1>
     e5a:	a0 91 62 01 	lds	r26, 0x0162	; 0x800162 <millis_timer_millis+0x2>
     e5e:	b0 91 63 01 	lds	r27, 0x0163	; 0x800163 <millis_timer_millis+0x3>
     e62:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <millis_timer_fract>
     e66:	26 e0       	ldi	r18, 0x06	; 6
     e68:	23 0f       	add	r18, r19
     e6a:	2d 37       	cpi	r18, 0x7D	; 125
     e6c:	30 f0       	brcs	.+12     	; 0xe7a <__vector_11+0x3e>
     e6e:	29 e8       	ldi	r18, 0x89	; 137
     e70:	23 0f       	add	r18, r19
     e72:	03 96       	adiw	r24, 0x03	; 3
     e74:	a1 1d       	adc	r26, r1
     e76:	b1 1d       	adc	r27, r1
     e78:	03 c0       	rjmp	.+6      	; 0xe80 <__vector_11+0x44>
     e7a:	02 96       	adiw	r24, 0x02	; 2
     e7c:	a1 1d       	adc	r26, r1
     e7e:	b1 1d       	adc	r27, r1
     e80:	20 93 5f 01 	sts	0x015F, r18	; 0x80015f <millis_timer_fract>
     e84:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <millis_timer_millis>
     e88:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <millis_timer_millis+0x1>
     e8c:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <millis_timer_millis+0x2>
     e90:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <millis_timer_millis+0x3>
     e94:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <millis_timer_overflow_count>
     e98:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <millis_timer_overflow_count+0x1>
     e9c:	a0 91 66 01 	lds	r26, 0x0166	; 0x800166 <millis_timer_overflow_count+0x2>
     ea0:	b0 91 67 01 	lds	r27, 0x0167	; 0x800167 <millis_timer_overflow_count+0x3>
     ea4:	01 96       	adiw	r24, 0x01	; 1
     ea6:	a1 1d       	adc	r26, r1
     ea8:	b1 1d       	adc	r27, r1
     eaa:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <millis_timer_overflow_count>
     eae:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <millis_timer_overflow_count+0x1>
     eb2:	a0 93 66 01 	sts	0x0166, r26	; 0x800166 <millis_timer_overflow_count+0x2>
     eb6:	b0 93 67 01 	sts	0x0167, r27	; 0x800167 <millis_timer_overflow_count+0x3>
     eba:	bf 91       	pop	r27
     ebc:	af 91       	pop	r26
     ebe:	9f 91       	pop	r25
     ec0:	8f 91       	pop	r24
     ec2:	3f 91       	pop	r19
     ec4:	2f 91       	pop	r18
     ec6:	0f 90       	pop	r0
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0f 90       	pop	r0
     ecc:	1f 90       	pop	r1
     ece:	18 95       	reti

00000ed0 <millis>:
millis():
     ed0:	2f b7       	in	r18, 0x3f	; 63
     ed2:	f8 94       	cli
     ed4:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <millis_timer_millis>
     ed8:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <millis_timer_millis+0x1>
     edc:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <millis_timer_millis+0x2>
     ee0:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <millis_timer_millis+0x3>
     ee4:	2f bf       	out	0x3f, r18	; 63
     ee6:	08 95       	ret

00000ee8 <init>:
init():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:753
  #endif
  #endif

  // Use the Millis Timer for fast PWM (unless it doesn't have an output).
  #if (TIMER_TO_USE_FOR_MILLIS == 0) && defined(WGM01)
  sbi(TCCR0A, WGM01);
     ee8:	80 b7       	in	r24, 0x30	; 48
     eea:	82 60       	ori	r24, 0x02	; 2
     eec:	80 bf       	out	0x30, r24	; 48
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:754
  sbi(TCCR0A, WGM00);
     eee:	80 b7       	in	r24, 0x30	; 48
     ef0:	81 60       	ori	r24, 0x01	; 1
     ef2:	80 bf       	out	0x30, r24	; 48
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:777
  #endif
  
  // Millis timer is always processor clock divided by MillisTimer_Prescale_Value (64)
  #if (TIMER_TO_USE_FOR_MILLIS == 0)
   #ifdef TCCR0B
    TCCR0B = (TCCR0B & ~((1<<CS02)|(1<<CS01)|(1<<CS00))) | (MillisTimer_Prescale_Index << CS00);
     ef4:	83 b7       	in	r24, 0x33	; 51
     ef6:	88 7f       	andi	r24, 0xF8	; 248
     ef8:	83 60       	ori	r24, 0x03	; 3
     efa:	83 bf       	out	0x33, r24	; 51
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:789
  TCCR1B = (TCCR1B & ~((1<<CS13)|(1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #elif (TIMER_TO_USE_FOR_MILLIS == 1)
  TCCR1B = (TCCR1B & ~((1<<CS12)|(1<<CS11)|(1<<CS10))) | (MillisTimer_Prescale_Index << CS10);
  #endif
  // this needs to be called before setup() or some functions won't work there
  sei();
     efc:	78 94       	sei
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:795
  
  // Enable the overlow interrupt (this is the basic system tic-toc for millis)
  #if defined(TIMSK) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  sbi(TIMSK, TOIE0);
  #elif defined(TIMSK0) && defined(TOIE0) && (TIMER_TO_USE_FOR_MILLIS == 0)
  sbi(TIMSK0, TOIE0);
     efe:	89 b7       	in	r24, 0x39	; 57
     f00:	81 60       	ori	r24, 0x01	; 1
     f02:	89 bf       	out	0x39, r24	; 57
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:806
  #error Millis() Timer overflow interrupt not set correctly
  #endif
  
  // Initialize the timer used for Tone
  #if INITIALIZE_SECONDARY_TIMERS
    initToneTimerInternal();
     f04:	88 df       	rcall	.-240    	; 0xe16 <initToneTimerInternal>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:813

  // Initialize the ADC
  #if defined( INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER ) && INITIALIZE_ANALOG_TO_DIGITAL_CONVERTER
  #if defined(ADCSRA)
    // set a2d prescale factor
	ADCSRA = (ADCSRA & ~((1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0))) | (ADC_ARDUINO_PRESCALER << ADPS0) | (1<<ADEN);
     f06:	86 b1       	in	r24, 0x06	; 6
     f08:	88 77       	andi	r24, 0x78	; 120
     f0a:	86 68       	ori	r24, 0x86	; 134
     f0c:	86 b9       	out	0x06, r24	; 6
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring.c:815
    // enable a2d conversions
    sbi(ADCSRA, ADEN);
     f0e:	37 9a       	sbi	0x06, 7	; 6
     f10:	08 95       	ret

00000f12 <turnOffPWM>:
turnOffPWM():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:67
}

static void turnOffPWM(uint8_t timer)
{
	#if defined(TCCR0A) && defined(COM0A1)
	if( timer == TIMER0A){
     f12:	81 30       	cpi	r24, 0x01	; 1
     f14:	31 f4       	brne	.+12     	; 0xf22 <turnOffPWM+0x10>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:68
		cbi(TCCR0A, COM0A1);
     f16:	80 b7       	in	r24, 0x30	; 48
     f18:	8f 77       	andi	r24, 0x7F	; 127
     f1a:	80 bf       	out	0x30, r24	; 48
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:69
		cbi(TCCR0A, COM0A0);
     f1c:	80 b7       	in	r24, 0x30	; 48
     f1e:	8f 7b       	andi	r24, 0xBF	; 191
     f20:	07 c0       	rjmp	.+14     	; 0xf30 <turnOffPWM+0x1e>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:74
	} else
	#endif

	#if defined(TCCR0A) && defined(COM0B1)
	if( timer == TIMER0B){
     f22:	82 30       	cpi	r24, 0x02	; 2
     f24:	39 f4       	brne	.+14     	; 0xf34 <turnOffPWM+0x22>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:75
		cbi(TCCR0A, COM0B1);
     f26:	80 b7       	in	r24, 0x30	; 48
     f28:	8f 7d       	andi	r24, 0xDF	; 223
     f2a:	80 bf       	out	0x30, r24	; 48
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:76
		cbi(TCCR0A, COM0B0);
     f2c:	80 b7       	in	r24, 0x30	; 48
     f2e:	8f 7e       	andi	r24, 0xEF	; 239
     f30:	80 bf       	out	0x30, r24	; 48
     f32:	08 95       	ret
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:81
	} else
	#endif

	#if defined(TCCR1A) && defined(COM1A1)
	if( timer == TIMER1A){
     f34:	83 30       	cpi	r24, 0x03	; 3
     f36:	31 f4       	brne	.+12     	; 0xf44 <turnOffPWM+0x32>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:82
		cbi(TCCR1A, COM1A1);
     f38:	8f b5       	in	r24, 0x2f	; 47
     f3a:	8f 77       	andi	r24, 0x7F	; 127
     f3c:	8f bd       	out	0x2f, r24	; 47
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:83
		cbi(TCCR1A, COM1A0);
     f3e:	8f b5       	in	r24, 0x2f	; 47
     f40:	8f 7b       	andi	r24, 0xBF	; 191
     f42:	07 c0       	rjmp	.+14     	; 0xf52 <turnOffPWM+0x40>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:115
	#endif
	} else
	#endif

	#if defined(TCCR1A) && defined(COM1B1)
	if( timer == TIMER1B){
     f44:	84 30       	cpi	r24, 0x04	; 4
     f46:	31 f4       	brne	.+12     	; 0xf54 <turnOffPWM+0x42>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:116
		cbi(TCCR1A, COM1B1);
     f48:	8f b5       	in	r24, 0x2f	; 47
     f4a:	8f 7d       	andi	r24, 0xDF	; 223
     f4c:	8f bd       	out	0x2f, r24	; 47
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:117
		cbi(TCCR1A, COM1B0);
     f4e:	8f b5       	in	r24, 0x2f	; 47
     f50:	8f 7e       	andi	r24, 0xEF	; 239
     f52:	8f bd       	out	0x2f, r24	; 47
     f54:	08 95       	ret

00000f56 <pinMode>:
pinMode():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:33
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:34
	if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
     f5a:	87 fd       	sbrc	r24, 7
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:34 (discriminator 1)
     f5c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:35
	uint8_t bit = digitalPinToBitMask(pin);
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	fc 01       	movw	r30, r24
     f62:	e2 5d       	subi	r30, 0xD2	; 210
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	24 91       	lpm	r18, Z
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:36
	uint8_t port = digitalPinToPort(pin);
     f68:	fc 01       	movw	r30, r24
     f6a:	e6 5c       	subi	r30, 0xC6	; 198
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	84 91       	lpm	r24, Z
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:39
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     f70:	88 23       	and	r24, r24
     f72:	61 f1       	breq	.+88     	; 0xfcc <pinMode+0x76>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:41

	reg = portModeRegister(port);
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	fc 01       	movw	r30, r24
     f7c:	ee 5a       	subi	r30, 0xAE	; 174
     f7e:	ff 4f       	sbci	r31, 0xFF	; 255
     f80:	c5 91       	lpm	r28, Z+
     f82:	d4 91       	lpm	r29, Z
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:42
	out = portOutputRegister(port);
     f84:	fc 01       	movw	r30, r24
     f86:	e4 5b       	subi	r30, 0xB4	; 180
     f88:	ff 4f       	sbci	r31, 0xFF	; 255
     f8a:	a5 91       	lpm	r26, Z+
     f8c:	b4 91       	lpm	r27, Z
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:44

	if (mode == INPUT) { 
     f8e:	61 11       	cpse	r22, r1
     f90:	09 c0       	rjmp	.+18     	; 0xfa4 <pinMode+0x4e>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:45
		uint8_t oldSREG = SREG;
     f92:	9f b7       	in	r25, 0x3f	; 63
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:46
                cli();
     f94:	f8 94       	cli
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:47
		*reg &= ~bit;
     f96:	88 81       	ld	r24, Y
     f98:	20 95       	com	r18
     f9a:	82 23       	and	r24, r18
     f9c:	88 83       	st	Y, r24
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:48
		*out &= ~bit;
     f9e:	ec 91       	ld	r30, X
     fa0:	2e 23       	and	r18, r30
     fa2:	0b c0       	rjmp	.+22     	; 0xfba <pinMode+0x64>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:50
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     fa4:	62 30       	cpi	r22, 0x02	; 2
     fa6:	61 f4       	brne	.+24     	; 0xfc0 <pinMode+0x6a>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:51
		uint8_t oldSREG = SREG;
     fa8:	9f b7       	in	r25, 0x3f	; 63
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:52
                cli();
     faa:	f8 94       	cli
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:53
		*reg &= ~bit;
     fac:	38 81       	ld	r19, Y
     fae:	82 2f       	mov	r24, r18
     fb0:	80 95       	com	r24
     fb2:	83 23       	and	r24, r19
     fb4:	88 83       	st	Y, r24
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:54
		*out |= bit;
     fb6:	ec 91       	ld	r30, X
     fb8:	2e 2b       	or	r18, r30
     fba:	2c 93       	st	X, r18
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:55
		SREG = oldSREG;
     fbc:	9f bf       	out	0x3f, r25	; 63
     fbe:	06 c0       	rjmp	.+12     	; 0xfcc <pinMode+0x76>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:57
	} else {
		uint8_t oldSREG = SREG;
     fc0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:58
                cli();
     fc2:	f8 94       	cli
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:59
		*reg |= bit;
     fc4:	e8 81       	ld	r30, Y
     fc6:	2e 2b       	or	r18, r30
     fc8:	28 83       	st	Y, r18
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:60
		SREG = oldSREG;
     fca:	8f bf       	out	0x3f, r24	; 63
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:62
	}
}
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <digitalWrite>:
digitalWrite():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:137
    }

}

void digitalWrite(uint8_t pin, uint8_t val)
{
     fd2:	0f 93       	push	r16
     fd4:	1f 93       	push	r17
     fd6:	cf 93       	push	r28
     fd8:	df 93       	push	r29
     fda:	1f 92       	push	r1
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:138
	if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
     fe0:	87 fd       	sbrc	r24, 7
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:138 (discriminator 1)
     fe2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:139
	uint8_t timer = digitalPinToTimer(pin);
     fe4:	28 2f       	mov	r18, r24
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	f9 01       	movw	r30, r18
     fea:	ee 5d       	subi	r30, 0xDE	; 222
     fec:	ff 4f       	sbci	r31, 0xFF	; 255
     fee:	84 91       	lpm	r24, Z
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:140
	uint8_t bit = digitalPinToBitMask(pin);
     ff0:	f9 01       	movw	r30, r18
     ff2:	e2 5d       	subi	r30, 0xD2	; 210
     ff4:	ff 4f       	sbci	r31, 0xFF	; 255
     ff6:	14 91       	lpm	r17, Z
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:141
	uint8_t port = digitalPinToPort(pin);
     ff8:	f9 01       	movw	r30, r18
     ffa:	e6 5c       	subi	r30, 0xC6	; 198
     ffc:	ff 4f       	sbci	r31, 0xFF	; 255
     ffe:	04 91       	lpm	r16, Z
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:144
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    1000:	00 23       	and	r16, r16
    1002:	d9 f0       	breq	.+54     	; 0x103a <digitalWrite+0x68>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:148

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1004:	88 23       	and	r24, r24
    1006:	19 f0       	breq	.+6      	; 0x100e <digitalWrite+0x3c>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:148 (discriminator 1)
    1008:	69 83       	std	Y+1, r22	; 0x01
    100a:	83 df       	rcall	.-250    	; 0xf12 <turnOffPWM>
    100c:	69 81       	ldd	r22, Y+1	; 0x01
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:150

	out = portOutputRegister(port);
    100e:	e0 2f       	mov	r30, r16
    1010:	f0 e0       	ldi	r31, 0x00	; 0
    1012:	ee 0f       	add	r30, r30
    1014:	ff 1f       	adc	r31, r31
    1016:	e4 5b       	subi	r30, 0xB4	; 180
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	a5 91       	lpm	r26, Z+
    101c:	b4 91       	lpm	r27, Z
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:153

	if (val == LOW) {
		uint8_t oldSREG = SREG;
    101e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:152
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);

	if (val == LOW) {
    1020:	61 11       	cpse	r22, r1
    1022:	06 c0       	rjmp	.+12     	; 0x1030 <digitalWrite+0x5e>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:154
		uint8_t oldSREG = SREG;
    cli();
    1024:	f8 94       	cli
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:155
		*out &= ~bit;
    1026:	9c 91       	ld	r25, X
    1028:	e1 2f       	mov	r30, r17
    102a:	e0 95       	com	r30
    102c:	e9 23       	and	r30, r25
    102e:	03 c0       	rjmp	.+6      	; 0x1036 <digitalWrite+0x64>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:159
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
    cli();
    1030:	f8 94       	cli
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:160
		*out |= bit;
    1032:	ec 91       	ld	r30, X
    1034:	e1 2b       	or	r30, r17
    1036:	ec 93       	st	X, r30
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:161
		SREG = oldSREG;
    1038:	8f bf       	out	0x3f, r24	; 63
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:163
	}
}
    103a:	0f 90       	pop	r0
    103c:	df 91       	pop	r29
    103e:	cf 91       	pop	r28
    1040:	1f 91       	pop	r17
    1042:	0f 91       	pop	r16
    1044:	08 95       	ret

00001046 <digitalRead>:
digitalRead():
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:166

int digitalRead(uint8_t pin)
{
    1046:	cf 93       	push	r28
    1048:	df 93       	push	r29
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:167
	if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
    104a:	87 fd       	sbrc	r24, 7
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:167 (discriminator 1)
    104c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:168
	uint8_t timer = digitalPinToTimer(pin);
    104e:	28 2f       	mov	r18, r24
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	f9 01       	movw	r30, r18
    1054:	ee 5d       	subi	r30, 0xDE	; 222
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	84 91       	lpm	r24, Z
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:169
	uint8_t bit = digitalPinToBitMask(pin);
    105a:	f9 01       	movw	r30, r18
    105c:	e2 5d       	subi	r30, 0xD2	; 210
    105e:	ff 4f       	sbci	r31, 0xFF	; 255
    1060:	d4 91       	lpm	r29, Z
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:170
	uint8_t port = digitalPinToPort(pin);
    1062:	f9 01       	movw	r30, r18
    1064:	e6 5c       	subi	r30, 0xC6	; 198
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	c4 91       	lpm	r28, Z
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:172

	if (port == NOT_A_PIN) return LOW;
    106a:	cc 23       	and	r28, r28
    106c:	89 f0       	breq	.+34     	; 0x1090 <digitalRead+0x4a>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:176

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    106e:	81 11       	cpse	r24, r1
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:176 (discriminator 1)
    1070:	50 df       	rcall	.-352    	; 0xf12 <turnOffPWM>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:178

	if (*portInputRegister(port) & bit) return HIGH;
    1072:	ec 2f       	mov	r30, r28
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	ea 5b       	subi	r30, 0xBA	; 186
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	a5 91       	lpm	r26, Z+
    1080:	b4 91       	lpm	r27, Z
    1082:	ec 91       	ld	r30, X
    1084:	ed 23       	and	r30, r29
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	21 f4       	brne	.+8      	; 0x1094 <digitalRead+0x4e>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <digitalRead+0x4e>
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:172
	if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\pete.lewis.SPARKFUN\AppData\Local\Arduino15\packages\ATTinyCore\hardware\avr\1.2.3\cores\tiny/wiring_digital.c:180
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1094:	df 91       	pop	r29
    1096:	cf 91       	pop	r28
    1098:	08 95       	ret

0000109a <__mulhi3>:
__mulhi3():
    109a:	00 24       	eor	r0, r0
    109c:	55 27       	eor	r21, r21
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__mulhi3+0xe>
    10a0:	08 0e       	add	r0, r24
    10a2:	59 1f       	adc	r21, r25
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	00 97       	sbiw	r24, 0x00	; 0
    10aa:	29 f0       	breq	.+10     	; 0x10b6 <__mulhi3+0x1c>
    10ac:	76 95       	lsr	r23
    10ae:	67 95       	ror	r22
    10b0:	b8 f3       	brcs	.-18     	; 0x10a0 <__mulhi3+0x6>
    10b2:	71 05       	cpc	r23, r1
    10b4:	b9 f7       	brne	.-18     	; 0x10a4 <__mulhi3+0xa>
    10b6:	80 2d       	mov	r24, r0
    10b8:	95 2f       	mov	r25, r21
    10ba:	08 95       	ret

000010bc <__tablejump2__>:
__tablejump2__():
    10bc:	ee 0f       	add	r30, r30
    10be:	ff 1f       	adc	r31, r31
    10c0:	05 90       	lpm	r0, Z+
    10c2:	f4 91       	lpm	r31, Z
    10c4:	e0 2d       	mov	r30, r0
    10c6:	09 94       	ijmp

000010c8 <eeprom_read_byte>:
eeprom_read_byte():
    10c8:	e1 99       	sbic	0x1c, 1	; 28
    10ca:	fe cf       	rjmp	.-4      	; 0x10c8 <eeprom_read_byte>
    10cc:	9f bb       	out	0x1f, r25	; 31
    10ce:	8e bb       	out	0x1e, r24	; 30
    10d0:	e0 9a       	sbi	0x1c, 0	; 28
    10d2:	99 27       	eor	r25, r25
    10d4:	8d b3       	in	r24, 0x1d	; 29
    10d6:	08 95       	ret

000010d8 <eeprom_write_byte>:
eeprom_write_byte():
    10d8:	26 2f       	mov	r18, r22

000010da <eeprom_write_r18>:
    10da:	e1 99       	sbic	0x1c, 1	; 28
    10dc:	fe cf       	rjmp	.-4      	; 0x10da <eeprom_write_r18>
    10de:	1c ba       	out	0x1c, r1	; 28
    10e0:	9f bb       	out	0x1f, r25	; 31
    10e2:	8e bb       	out	0x1e, r24	; 30
    10e4:	2d bb       	out	0x1d, r18	; 29
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	e2 9a       	sbi	0x1c, 2	; 28
    10ec:	e1 9a       	sbi	0x1c, 1	; 28
    10ee:	0f be       	out	0x3f, r0	; 63
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	08 95       	ret

000010f4 <_exit>:
exit():
    10f4:	f8 94       	cli

000010f6 <__stop_program>:
__stop_program():
    10f6:	ff cf       	rjmp	.-2      	; 0x10f6 <__stop_program>
